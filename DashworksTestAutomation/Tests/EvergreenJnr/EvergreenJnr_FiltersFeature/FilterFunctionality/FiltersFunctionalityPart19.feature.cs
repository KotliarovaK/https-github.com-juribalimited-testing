// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DashworksTestAutomation.Tests.EvergreenJnr.EvergreenJnr_FiltersFeature.FilterFunctionality
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FiltersFunctionalityPart19")]
    public partial class FiltersFunctionalityPart19Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FiltersFunctionalityPart19.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FiltersFunctionalityPart19", "\tRuns Filters Functionality related tests", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("User is logged in to the Evergreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Then("Evergreen Dashboards page should be displayed to the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartI")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartI()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartI", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 10
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table1.AddRow(new string[] {
                        "",
                        "Used on device"});
            table1.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table1.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 12
 testRunner.When("User add \"Device Owner Building\" filter where type is \"Not empty\" with following " +
                    "Value and Association:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table2.AddRow(new string[] {
                        "Belfast",
                        "Used on device"});
            table2.AddRow(new string[] {
                        "Los Angeles",
                        "Entitled to device"});
            table2.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 17
 testRunner.And("User Add And \"Device Owner City\" filter where type is \"Equals\" with following Loo" +
                    "kup Value and Association:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table3.AddRow(new string[] {
                        "Red",
                        "Used on device"});
            table3.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table3.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 22
 testRunner.And("User Add And \"Device Owner Compliance\" filter where type is \"Does not equal\" with" +
                    " selected Checkboxes and following Association:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table4.AddRow(new string[] {
                        "Empty",
                        "Not installed on device"});
            table4.AddRow(new string[] {
                        "",
                        "Not entitled to device"});
            table4.AddRow(new string[] {
                        "",
                        "Not used on device"});
#line 27
 testRunner.And("User Add And \"Device Owner Country\" filter where type is \"Equals\" with following " +
                    "Lookup Value and Association:", ((string)(null)), table4, "And ");
#line 32
 testRunner.Then("\"846\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartII()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 36
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table5.AddRow(new string[] {
                        "Finance",
                        "Used on device"});
            table5.AddRow(new string[] {
                        "Sales",
                        "Entitled to device"});
            table5.AddRow(new string[] {
                        "Support",
                        "Installed on device"});
            table5.AddRow(new string[] {
                        "Technology",
                        ""});
#line 38
 testRunner.And("User add \"Device Owner Department\" filter where type is \"Equals\" with selected Ex" +
                    "panded Checkboxes and following Association:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table6.AddRow(new string[] {
                        "pro",
                        "Not installed on device"});
#line 44
 testRunner.And("User Add And \"Device Owner Description\" filter where type is \"Does not begin with" +
                    "\" with following Value and Association:", ((string)(null)), table6, "And ");
#line 47
 testRunner.Then("\"854\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIII()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIIIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIIIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 51
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table7.AddRow(new string[] {
                        "Aceline",
                        "Entitled to device"});
            table7.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 53
 testRunner.And("User add \"Device Owner Display Name\" filter where type is \"Contains\" with followi" +
                    "ng Value and Association:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table8.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table8.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 57
 testRunner.And("User Add And \"Device Owner Domain\" filter where type is \"Not empty\" with followin" +
                    "g Value and Association:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table9.AddRow(new string[] {
                        "demo.juriba.com",
                        "Entitled to device"});
            table9.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 61
 testRunner.And("User Add And \"Device Owner Email Address\" filter where type is \"Ends with\" with f" +
                    "ollowing Value and Association:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table10.AddRow(new string[] {
                        "TRUE",
                        "Entitled to device"});
            table10.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 65
 testRunner.And("User Add And \"Device Owner Enabled\" filter where type is \"Equals\" with selected C" +
                    "heckboxes and following Association:", ((string)(null)), table10, "And ");
#line 69
 testRunner.Then("\"23\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIV")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIV()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIVInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIVInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIV", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 73
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table11.AddRow(new string[] {
                        "Empty",
                        "Entitled to device"});
            table11.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 75
 testRunner.And("User add \"Device Owner Floor\" filter where type is \"Equals\" with following Lookup" +
                    " Value and Association:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table12.AddRow(new string[] {
                        "sdsds",
                        "Entitled to device"});
            table12.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 79
 testRunner.And("User Add And \"Device Owner Given Name\" filter where type is \"Does not end with\" w" +
                    "ith following Value and Association:", ((string)(null)), table12, "And ");
#line 83
 testRunner.Then("\"1,139\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartV")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartV()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartVInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartVInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartV", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 87
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table13.AddRow(new string[] {
                        "\\\\fileserver",
                        "Used on device"});
            table13.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table13.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 89
 testRunner.And("User add \"Device Owner Home Directory\" filter where type is \"Begins with\" with fo" +
                    "llowing Value and Association:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table14.AddRow(new string[] {
                        "H:",
                        "Entitled to device"});
#line 94
 testRunner.And("User Add And \"Device Owner Home Drive\" filter where type is \"Equals\" with selecte" +
                    "d Checkboxes and following Association:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table15.AddRow(new string[] {
                        "ZZW1565756",
                        "Not installed on device"});
#line 97
 testRunner.And("User Add And \"Device Owner Username\" filter where type is \"Does not equal\" with f" +
                    "ollowing Value and Association:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table16.AddRow(new string[] {
                        "8 Aug 2019",
                        "Entitled to device"});
#line 100
 testRunner.When("User Add And \"Device Owner Last Logon Date\" filter where type is \"Before\" with fo" +
                    "llowing Data and Association:", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Association"});
            table17.AddRow(new string[] {
                        "4",
                        "Entitled to device"});
#line 103
 testRunner.And("User Add And \"Device Owner Key\" filter where type is \"Greater than\" with followin" +
                    "g Number and Association:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table18.AddRow(new string[] {
                        "Empty",
                        "Entitled to device"});
            table18.AddRow(new string[] {
                        "US-E",
                        ""});
#line 106
 testRunner.And("User Add And \"Device Owner Region\" filter where type is \"Equals\" with following L" +
                    "ookup Value and Association:", ((string)(null)), table18, "And ");
#line 110
 testRunner.Then("\"213\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

    }
}
#pragma warning restore
#endregion

