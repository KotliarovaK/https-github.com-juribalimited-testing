// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DashworksTestAutomation.Tests.EvergreenJnr.EvergreenJnr_FiltersFeature.FilterFunctionality
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FiltersFunctionalityPart18")]
    public partial class FiltersFunctionalityPart18Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FiltersFunctionalityPart18.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FiltersFunctionalityPart18", "\tRuns Filters Functionality related tests", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("User is logged in to the Evergreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Then("Evergreen Dashboards page should be displayed to the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15082")]
        [NUnit.Framework.CategoryAttribute("DAS17717")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartII()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15082",
                        "DAS17717"});
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 10
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table1.AddRow(new string[] {
                        "",
                        "Used on device"});
            table1.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table1.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 12
 testRunner.And("User add \"Device IP Address\" filter where type is \"Not empty\" with following Valu" +
                    "e and Association:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table2.AddRow(new string[] {
                        "",
                        "Used on device"});
            table2.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table2.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 17
 testRunner.And("User Add And \"Device IPv6 Address\" filter where type is \"Not empty\" with followin" +
                    "g Value and Association:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table3.AddRow(new string[] {
                        "",
                        "Used on device"});
            table3.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table3.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 22
 testRunner.And("User Add And \"Device Manufacturer\" filter where type is \"Not empty\" with followin" +
                    "g Value and Association:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Association"});
            table4.AddRow(new string[] {
                        "0",
                        "Used on device"});
            table4.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table4.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 27
 testRunner.And("User Add And \"Device Memory (GB)\" filter where type is \"Greater than\" with follow" +
                    "ing Number and Association:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table5.AddRow(new string[] {
                        "",
                        "Used on device"});
            table5.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table5.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 32
 testRunner.And("User Add And \"Device Model\" filter where type is \"Not empty\" with following Value" +
                    " and Association:", ((string)(null)), table5, "And ");
#line 37
 testRunner.Then("\"1,032\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15082")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIII()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIIIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIIIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceHardwareItemsCounterPartIII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15082"});
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 42
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table6.AddRow(new string[] {
                        "FALSE",
                        "Used on device"});
            table6.AddRow(new string[] {
                        "TRUE",
                        "Entitled to device"});
            table6.AddRow(new string[] {
                        "UNKNOWN",
                        "Installed on device"});
#line 44
 testRunner.And("User add \"Device TPM Enabled\" filter where type is \"Equals\" with selected Checkbo" +
                    "xes and following Association:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Values",
                        "Association"});
            table7.AddRow(new string[] {
                        "",
                        "Used on device"});
            table7.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table7.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 49
 testRunner.And("User Add And \"Device TPM Version\" filter where type is \"Not empty\" with following" +
                    " Value and Association:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Association"});
            table8.AddRow(new string[] {
                        "0",
                        "Used on device"});
            table8.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table8.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 54
 testRunner.And("User Add And \"Device Target Drive Free Space (GB)\" filter where type is \"Greater " +
                    "than\" with following Number and Association:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table9.AddRow(new string[] {
                        "Data Centre",
                        "Used on device"});
            table9.AddRow(new string[] {
                        "Desktop",
                        "Entitled to device"});
            table9.AddRow(new string[] {
                        "Laptop",
                        "Installed on device"});
            table9.AddRow(new string[] {
                        "Mobile",
                        ""});
            table9.AddRow(new string[] {
                        "Other",
                        ""});
            table9.AddRow(new string[] {
                        "Virtual",
                        ""});
#line 59
 testRunner.And("User Add And \"Device Type\" filter where type is \"Equals\" with following Lookup Va" +
                    "lue and Association:", ((string)(null)), table9, "And ");
#line 67
 testRunner.Then("\"361\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterI")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15082")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterI()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterI", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15082"});
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 71
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table10.AddRow(new string[] {
                        "Empty",
                        "Used on device"});
            table10.AddRow(new string[] {
                        "32",
                        "Entitled to device"});
            table10.AddRow(new string[] {
                        "64",
                        "Installed on device"});
#line 73
 testRunner.And("User add \"Device OS Architecture\" filter where type is \"Equals\" with selected Che" +
                    "ckboxes and following Association:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table11.AddRow(new string[] {
                        "Current Branch",
                        "Not entitled to device"});
            table11.AddRow(new string[] {
                        "",
                        "Not installed on device"});
            table11.AddRow(new string[] {
                        "",
                        "Not used on device"});
#line 78
 testRunner.And("User Add And \"Device OS Branch\" filter where type is \"Does not equal\" with select" +
                    "ed Checkboxes and following Association:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table12.AddRow(new string[] {
                        "Android 4.3",
                        "Used on device"});
            table12.AddRow(new string[] {
                        "Empty",
                        "Entitled to device"});
            table12.AddRow(new string[] {
                        "Android 4.4",
                        "Installed on device"});
            table12.AddRow(new string[] {
                        "Android 5.0",
                        ""});
            table12.AddRow(new string[] {
                        "Android 5.1",
                        ""});
#line 83
 testRunner.And("User Add And \"Device OS Full Name\" filter where type is \"Equals\" with following L" +
                    "ookup Value and Association:", ((string)(null)), table12, "And ");
#line 90
 testRunner.Then("\"4\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15082")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterII()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterIIInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterIIInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceDeviceOperatingSystemItemsCounterII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15082"});
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 94
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedCheckboxes",
                        "Association"});
            table13.AddRow(new string[] {
                        "Empty",
                        "Used on device"});
            table13.AddRow(new string[] {
                        "",
                        "Entitled to device"});
            table13.AddRow(new string[] {
                        "",
                        "Installed on device"});
#line 96
 testRunner.And("User add \"Device OS Servicing State\" filter where type is \"Does not equal\" with s" +
                    "elected Checkboxes and following Association:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table14.AddRow(new string[] {
                        "10.0",
                        "Used on device"});
            table14.AddRow(new string[] {
                        "10.0.10240",
                        "Entitled to device"});
            table14.AddRow(new string[] {
                        "Empty",
                        "Installed on device"});
            table14.AddRow(new string[] {
                        "10.0.15063",
                        ""});
            table14.AddRow(new string[] {
                        "10.0.14393",
                        ""});
#line 101
 testRunner.And("User Add And \"Device OS Version Number\" filter where type is \"Equals\" with follow" +
                    "ing Lookup Value and Association:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelectedValues",
                        "Association"});
            table15.AddRow(new string[] {
                        "Service Pack 1",
                        "Used on device"});
            table15.AddRow(new string[] {
                        "Empty",
                        "Entitled to device"});
            table15.AddRow(new string[] {
                        "No Service Pack",
                        "Installed on device"});
            table15.AddRow(new string[] {
                        "Service Pack 2",
                        ""});
            table15.AddRow(new string[] {
                        "Service Pack 3",
                        ""});
#line 108
 testRunner.And("User Add And \"Device Service Pack or Build\" filter where type is \"Equals\" with fo" +
                    "llowing Lookup Value and Association:", ((string)(null)), table15, "And ");
#line 115
 testRunner.Then("\"170\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

    }
}
#pragma warning restore
#endregion

