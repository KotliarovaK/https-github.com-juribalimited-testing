// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DashworksTestAutomation.Tests.EvergreenJnr.EvergreenJnr_API_FiltersAndColumns
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ApplicationsFiltersAndColumns")]
    public partial class ApplicationsFiltersAndColumnsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ApplicationsFiltersAndColumns.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ApplicationsFiltersAndColumns", "\tCheck all Columns and Filters via API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("User is logged in to the Evergreen via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckAllColumnsAndFilters")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        public virtual void EvergreenJnr_ApplicationsList_CheckAllColumnsAndFilters()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckAllColumnsAndFiltersInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckAllColumnsAndFiltersInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckAllColumnsAndFilters", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 9
 testRunner.Then("All filters with correct data are returned from the API for \'Applications\' list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.Then("All columns with correct data are returned from the API for \'Applications\' list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckFiltersAndColumnsResponseData")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS19261")]
        [NUnit.Framework.TestCaseAttribute("Suggested", "Application", "applications?$filter=(packageName%20EQUALS%20(\'32VerSee%20v.231%20en%20(C%3A%5C32" +
            "VerSee%5CÂ§\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Suggested", "Vendor", "applications?$filter=(packageManufacturer%20NOT%20EQUALS%20(\'Adobe\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Suggested", "Version", "applications?$filter=(packageVersion%20CONTAINS%20(\'12.1\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Application (Saved List)", "applications?$filter=(applicationListId%20IN%20(\'37\'%2C\'59\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Application Key", "applications?$filter=(packageKey%20%3D%20111)&$select=packageName,packageManufact" +
            "urer,packageVersion,packageKey", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Compliance", "applications?$filter=(migrationRAG%20EQUALS%20(\'Red\'%2C\'Amber\'%2C\'None\'))&$select" +
            "=packageName,packageManufacturer,packageVersion,migrationRAG", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Dashworks First Seen", "applications?$filter=(dashworksFirstSeenDate%20IS%20EMPTY%20())&$select=packageNa" +
            "me,packageManufacturer,packageVersion,dashworksFirstSeenDate", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Device Count (Entitled)", "applications?$filter=(computerEntitlements%20%3D%201)&$select=packageName,package" +
            "Manufacturer,packageVersion,computerEntitlements", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Device Count (Installed)", "applications?$filter=(installed%20<>%201)&$select=packageName,packageManufacturer" +
            ",packageVersion,installed&$orderby=installed%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Device Count (Used)", "applications?$filter=(computerUsage%20>%2085)&$select=packageName,packageManufact" +
            "urer,packageVersion,computerUsage", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Import", "applications?$filter=(distributionHierarchy%20NOT%20EQUALS%20(\'FR\'%2C\'SCCM%202012" +
            "\'))&$select=packageName,packageManufacturer,packageVersion,distributionHierarchy" +
            "", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Import Type", "applications?$filter=(distributionType%20EQUALS%20(\'Generic\'%2C\'SCCM%202012%2B\'))" +
            "&$select=packageName,packageManufacturer,packageVersion,distributionType&$orderb" +
            "y=distributionType%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "Inventory Site", "applications?$filter=(packageSite%20NOT%20EQUALS%20(\'Altiris\'%2C\'SMS_GEN\'))&$sele" +
            "ct=packageName,packageManufacturer,packageVersion,packageSite&$orderby=packageSi" +
            "te%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "User Count (Entitled)", "applications?$filter=(userEntitlements%20>%3D%2020)&$select=packageName,packageMa" +
            "nufacturer,packageVersion,userEntitlements&$orderby=userEntitlements%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Application", "User Count (Used)", "applications?$filter=(userUsage%20<%203)&$select=packageName,packageManufacturer," +
            "packageVersion,userUsage&$orderby=userUsage%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Custom Fields", "App Field 1", "applications?$filter=(customField_69%20CONTAINS%20(\'1kk%2C\'))&$select=packageName" +
            ",packageManufacturer,packageVersion,customField_69&$orderby=customField_69%20des" +
            "c", null)]
        [NUnit.Framework.TestCaseAttribute("Evergreen", "Evergreen Capacity Unit", "applications?$filter=(evergreenCapacityUnit%20EQUALS%20(\'Birmingham\'%2C\'DefaultCa" +
            "pacityUnit13720\'%2C\'Unassigned\'%2C\'New%20York\'))&$select=packageName,packageManu" +
            "facturer,packageVersion,evergreenCapacityUnit&$orderby=evergreenCapacityUnit%20d" +
            "esc", null)]
        [NUnit.Framework.TestCaseAttribute("Device", "Device (Saved List)", "applications?$filter=(deviceSavedListId%20EQUALS%20(\'18\'%2C\'60\')%20WHERE%20(netd%" +
            "2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device", "Device Compliance", "applications?$filter=(deviceMigrationRAG%20NOT%20EQUALS%20(\'Unknown\'%2C\'None\')%20" +
            "WHERE%20(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device", "Device Hostname", "applications?$filter=(deviceHostname%20ENDS%20WITH%20(\'AB\')%20WHERE%20(uod%2Cetd%" +
            "2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device", "Device Inverntory Site", "applications?$filter=(deviceDistSiteName%20IS%20NOT%20EMPTY%20()%20WHERE%20(uod%2" +
            "Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device", "Device Key", "applications?$filter=(computerKey%20IS%20NOT%20EMPTY%20()%20WHERE%20(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Custom Fields", "Device Computer Warranty", "applications?$filter=(applicationDeviceCustomField_32%20IS%20NOT%20EMPTY%20()%20W" +
            "HERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Evergreen", "Device Evergreen Bucket", "applications?$filter=(evergreenDeviceBucket%20EQUALS%20(\'Unassigned\'%2C\'London%20" +
            "-%20City\')%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Evergreen", "Device Evergreen Ring", "applications?$filter=(evergreenDeviceRing%20NOT%20EQUALS%20(\'Unassigned\')%20WHERE" +
            "%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Evergreen", "Device Evergreen Capacity Unit", "applications?$filter=(evergreenDeviceCapacityUnit%20EQUALS%20(\'New%20York\'%2C\'Lon" +
            "don%20-%20Southbank\'%2C\'London%20-%20City\')%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device CPU Architecture", "applications?$filter=(deviceProcessorArchitecture%20EQUALS%20(\'NULL\'%2C\'32\')%20WH" +
            "ERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device CPU Speed (GHz)", "applications?$filter=(deviceProcessorSpeed%20%3D%204%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Format", "applications?$filter=(deviceChassisType%20NOT%20EQUALS%20(\'Rack%20Mount%20Chassis" +
            "\'%2C\'Tablet\'%2C\'Virtual\')%20WHERE%20(nuod%2Cnetd%2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device HDD Total Size (GB)", "applications?$filter=(deviceHDDTotalSpaceGB%20<%20180.72%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device IP Address", "applications?$filter=(deviceNetworkCardIPAddress%20DOES%20NOT%20BEGIN%20WITH%20(\'" +
            "192.\')%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device IPv6 Address", "applications?$filter=(deviceNetworkCardIpAddressV6%20CONTAINS%20(\'fe80%3A%3A\')%20" +
            "WHERE%20(etd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Manufacturer", "applications?$filter=(deviceManufacturer%20NOT%20EQUALS%20(\'Microsoft%20Corporati" +
            "on\'%2C\'Lenovo\'%2C\'HP\')%20WHERE%20(nuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Memory (GB)", "applications?$filter=(deviceMemoryGB%20<%3D%2019.94%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Model", "applications?$filter=(deviceModel%20EQUALS%20(\'\'\'%5B-%2C%5D%3D%2B.%3B%3A%40~%7D%7" +
            "B!\"Â£%24%25%5E%26*(Â§%60\')%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Target Free Drive (GB)", "applications?$filter=(deviceTargetDriveFreeSpaceGB%20<%3D%2054.63%20WHERE%20(uod)" +
            ")", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device TPM Enabled", "applications?$filter=(deviceTPMEnabled%20NOT%20EQUALS%20(\'0\'%2C\'NULL\')%20WHERE%20" +
            "(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device TPM Version", "applications?$filter=(deviceTPMVersion%20CONTAINS%20(\'2.0\')%20WHERE%20(uod%2Cetd)" +
            ")", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Type", "applications?$filter=(deviceChassisCategory%20EQUALS%20(\'Desktop\'%2C\'Virtual\'%2C\'" +
            "Data%20Centre\')%20WHERE%20(niod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Hardware", "Device Virtual Machine Host", "applications?$filter=(deviceVirtualMachineHost%20BEGINS%20WITH%20(\'GARI\')%20WHERE" +
            "%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device Building", "applications?$filter=(deviceBuildingName%20EQUALS%20(\'777%20Tower\'%2C\'Capital%20T" +
            "ower\'%2C\'Exchange%20Tower\'%2C\'NULL\')%20WHERE%20(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device City", "applications?$filter=(deviceCity%20EQUALS%20(\'NULL\'%2C\'London\'%2C\'San%20Diego\')%2" +
            "0WHERE%20(nuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device Country", "applications?$filter=(deviceCountry%20NOT%20EQUALS%20(\'NULL\'%2C\'England\'%2C\'USA\')" +
            "%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device Floor", "applications?$filter=(deviceFloor%20EQUALS%20(\'18\'%2C\'19\'%2C\'20\'%2C\'NULL\'%2C\'0\'%2" +
            "C\'1\')%20WHERE%20(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device Location Name", "applications?$filter=(deviceLocationName%20IS%20NOT%20EMPTY%20()%20WHERE%20(uod%2" +
            "Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device Postal Code", "applications?$filter=(devicePostalCode%20BEGINS%20WITH%20(\'EC2N%201H\'%2C\'BT1\')%20" +
            "WHERE%20(niod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device Region", "applications?$filter=(deviceRegion%20NOT%20EQUALS%20(\'NULL\')%20WHERE%20(nuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Location", "Device State County", "applications?$filter=(deviceStateCounty%20EQUALS%20(\'NULL\'%2C\'AB\'%2C\'VIC\')%20WHER" +
            "E%20(etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Operating System", "Device OS Architecture", "applications?$filter=(deviceOSArchitecture%20EQUALS%20(\'32\')%20WHERE%20(uod%2Ciod" +
            "))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Operating System", "Device OS Branch", "applications?$filter=(deviceOSBranch%20NOT%20EQUALS%20(\'NULL\')%20WHERE%20(nuod%2C" +
            "niod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Operating System", "Device OS Full Name", "applications?$filter=(deviceOSName%20IS%20NOT%20EMPTY%20()%20WHERE%20(iod%2Cetd))" +
            "", null)]
        [NUnit.Framework.TestCaseAttribute("Device Operating System", "Device OS Servicing State", "applications?$filter=(deviceOSServicingState%20EQUALS%20(\'NULL\'%2C\'Current\')%20WH" +
            "ERE%20(netd%2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Operating System", "Device OS Version Number", "applications?$filter=(deviceOSVersion%20NOT%20EQUALS%20(\'NULL\'%2C\'10.0\'%2C\'10.0.1" +
            "0240\'%2C\'10.0.14393\'%2C\'10.0.15063\'%2C\'10.1\'%2C\'10.10.5\'%2C\'10.11.2\'%2C\'10.12.3\'" +
            "%2C\'10.2\'%2C\'10.3\'%2C\'10.5.8\'%2C\'10.8.5\'%2C\'10.9.5\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Operating System", "Device Service Pack or Build", "applications?$filter=(deviceOSServicePackName%20IS%20NOT%20EMPTY%20()%20WHERE%20(" +
            "nuod%2Cnetd%2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Cost Centre", "applications?$filter=(deviceCostCentre%20DOES%20NOT%20BEGIN%20WITH%20(\'100\'%2C\'50" +
            "0\')%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department", "applications?$filter=(deviceAssociationDepartmentKey%20EQUALS%20(\'14\'%2C\'10\'%2C\'6" +
            "\')%20WHERE%20(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Code", "applications?$filter=(deviceDepartmentCode%20ENDS%20WITH%20(\'10\'%2C\'05\'%2C\'3003\'%" +
            "2C\'U7007\')%20WHERE%20(iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Full Path", "applications?$filter=(deviceFullDepartmentPath%20DOES%20NOT%20END%20WITH%20(\'logy" +
            "\'%2C\'Support\')%20WHERE%20(etd%2Cuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 1", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_1%20NOT%20EQUALS%20" +
            "(\'1\'%2C\'2\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 2", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_2%20EQUALS%20(\'3\'%2" +
            "C\'4\'%2C\'5\'%2C\'7\'%2C\'8\'%2C\'10\'%2C\'11\')%20WHERE%20(etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 3", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_3%20NOT%20EQUALS%20" +
            "(\'6\'%2C\'12\'%2C\'13\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 4", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_4%20EQUALS%20(\'15\')" +
            "%20WHERE%20(etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 5", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_5%20NOT%20EQUALS%20" +
            "(\'16\')%20WHERE%20(etd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 6", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_6%20EQUALS%20(\'17\')" +
            "%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Level 7", "applications?$filter=(applicationDeviceDepartmentLevelFieldId_7%20EQUALS%20(\'18\')" +
            "%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Organisation", "Device Department Name", "applications?$filter=(deviceDepartmentName%20IS%20NOT%20EMPTY%20()%20WHERE%20(uod" +
            "%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner (Saved List)", "applications?$filter=(deviceOwnerSavedListId%20NOT%20EQUALS%20(\'61\')%20WHERE%20(u" +
            "od%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner", "applications?$filter=(deviceOwner%20NOT%20EQUALS%20(\'85305\'%2C\'82714\'%2C\'92235\'%2" +
            "C\'81710\'%2C\'93077\'%2C\'84410\'%2C\'85363\'%2C\'83050\')%20WHERE%20(niod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Common Name", "applications?$filter=(deviceOwnerCommonName%20ENDS%20WITH%20(\'95\'%2C\'18\'%2C\'F7885" +
            "535\')%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Compliance", "applications?$filter=(deviceOwnerMigrationRAG%20NOT%20EQUALS%20(\'None\'%2C\'Red\')%2" +
            "0WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Description", @"applications?$filter=(deviceOwnerDescription%20EQUALS%20('Pro%20linguens%20imaginator%20pars%20fecit.%20%20Et%20quad%20fecit%2C%20non%20apparens%20vantis.%20Sed%20quad%20fecit%2C%20non%20quo%20plorum%20in%20volcans%20essit.%20%20Pro%20linguens%20non%20trepicandor%20si%20nomen%20novum%20eggredior.%20%20Longam%2C%20e%20funem.%20%20Quad%20rarendum%20habitatio%20quoque%20plorum%20fecundio%2C%20et%20bono'%2C'Versus%20esset%20in%20dolorum%20cognitio%2C%20travissimantor%20quantare%20sed%20quartu%20manifestum%20egreddior%20estum.%20%20Multum%20gravum%20et%20nomen%20novum%20eggredior.%20%20Longam%2C%20e%20funem.%20%20Quad%20rarendum%20habitatio%20quoque%20plorum%20fecundio%2C%20et%20nomen%20transit.%20Quad%20rarendum%20habitatio%20quoque%20plorum%20fecundio%2C%20et%20plurissimum%20parte%20brevens%2C%20non%20quo%20linguens%20non%20apparens%20vantis.%20Sed%20quad%20ut%20novum%20eggredior.')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Directory Type", "applications?$filter=(deviceOwnerDirectoryType%20IS%20NOT%20EMPTY%20()%20WHERE%20" +
            "(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Display Name", "applications?$filter=(deviceOwnerDisplayName%20BEGINS%20WITH%20(\'Mel\'%2C\'Lis\'%2C\'" +
            "Joh\')%20WHERE%20(nuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Distinguished Name", "applications?$filter=(deviceOwnerDistinguishedName%20DOES%20NOT%20BEGIN%20WITH%20" +
            "(\'local\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Domain", "applications?$filter=(deviceOwnerDomain%20EQUALS%20(\'NULL\'%2C\'AU\')%20WHERE%20(nuo" +
            "d))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Email Address", "applications?$filter=(deviceOwnerEMailAddress%20DOES%20NOT%20END%20WITH%20(\'.com\'" +
            ")%20WHERE%20(iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Enabled", "applications?$filter=(deviceOwnerEnabled%20EQUALS%20(\'0\'%2C\'1\')%20WHERE%20(uod%2C" +
            "etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Given Name", "applications?$filter=(deviceOwnerGivenName%20CONTAINS%20(\'Lis\'%2C\'Joh\'%2C\'Mel\')%2" +
            "0WHERE%20(uod%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner GUID", "applications?$filter=(deviceOwnerObjectGuid%20EQUALS%20(\'f2b55f82-13ad-4306-b35a-" +
            "d082e6a1548f\')%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Home Directory", "applications?$filter=(deviceOwnerHomeDirectory%20NOT%20EQUALS%20(\'%5C%5Cfileserve" +
            "r1%5Chome%5CHRQ2819095\'%2C\'%5C%5Cfileserver1%5Chome%5CLRF7885535\')%20WHERE%20(nu" +
            "od%2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Home Drive", "applications?$filter=(deviceOwnerHomeDrive%20EQUALS%20(\'H%3A\')%20WHERE%20(uod%2Ce" +
            "td))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Key", "applications?$filter=(deviceOwnerObjectKey%20>%3D%2025368%20WHERE%20(uod%2Cetd%2C" +
            "iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Last Logon Date", "applications?$filter=(deviceOwnerLastLogonDate%20BETWEEN%20(2010-01-01_2011-12-31" +
            ")%20WHERE%20(uod%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Organizational Unit", "applications?$filter=(deviceOwnerOrganizationalUnit%20IS%20EMPTY%20()%20WHERE%20(" +
            "etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Parent Distinguished Name", "applications?$filter=(deviceOwnerParentDistinguishedName%20DOES%20NOT%20END%20WIT" +
            "H%20(\'US-W.local\'%2C\'US-E.local\')%20WHERE%20(niod%2Cnetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner SID", "applications?$filter=(deviceOwnerObjectSid%20NOT%20CONTAINS%20(\'67914689-1013\'%2C" +
            "\'8636753-29046174-1013\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Surname", "applications?$filter=(deviceOwnerSurname%20BEGINS%20WITH%20(\'Smi\'%2C\'Jon\')%20WHER" +
            "E%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner", "Device Owner Username", "applications?$filter=(deviceOwnerName%20BEGINS%20WITH%20(\'ZZ\'%2C\'QP\')%20WHERE%20(" +
            "uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner Building", "applications?$filter=(deviceOwnerBuilding%20IS%20NOT%20EMPTY%20()%20WHERE%20(uod%" +
            "2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner City", "applications?$filter=(deviceOwnerCity%20EQUALS%20(\'NULL\'%2C\'Belfast\')%20WHERE%20(" +
            "iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner Country", "applications?$filter=(deviceOwnerCountry%20NOT%20EQUALS%20(\'Australia\'%2C\'Canada\'" +
            "%2C\'USA\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner Floor", "applications?$filter=(deviceOwnerFloor%20NOT%20EQUALS%20(\'4\'%2C\'3\'%2C\'NULL\')%20WH" +
            "ERE%20(nuod%2Cnetd%2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner Location Name", "applications?$filter=(deviceOwnerLocationName%20EQUALS%20(\'NULL\')%20WHERE%20(uod)" +
            ")", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner Postal Code", "applications?$filter=(deviceOwnerPostalCode%20NOT%20EQUALS%20(\'NJ\'%2C\'CA\')%20WHER" +
            "E%20(nuod%2Cnetd%2Cniod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner Region", "applications?$filter=(deviceOwnerRegion%20EQUALS%20(\'NULL\'%2C\'AU\')%20WHERE%20(uod" +
            "))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Location", "Device Owner State/County", "applications?$filter=(deviceOwnerStateCounty%20NOT%20EQUALS%20(\'NULL\')%20WHERE%20" +
            "(iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Cost Centre", "applications?$filter=(deviceOwnerCostCentre%20NOT%20CONTAINS%20(\'010\')%20WHERE%20" +
            "(iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department", "applications?$filter=(deviceOwnerAssociationDepartmentKey%20NOT%20EQUALS%20(\'14\'%" +
            "2C\'9\')%20WHERE%20(etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Code", "applications?$filter=(deviceOwnerDepartmentCode%20BEGINS%20WITH%20(\'SU10\'%2C\'FA\')" +
            "%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Full Path", "applications?$filter=(deviceOwnerFullDepartmentPath%20EQUALS%20(\'Support%20>%20Op" +
            "erations%20>%20Technology\'%2C\'Facilities%20>%20Support\'%2C\'Technology\')%20WHERE%" +
            "20(iod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 1", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_1%20EQUALS%20(" +
            "\'14\'%2C\'9\')%20WHERE%20(etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 2", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_2%20EQUALS%20(" +
            "\'3\'%2C\'4\'%2C\'5\')%20WHERE%20(netd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 3", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_3%20NOT%20EQUA" +
            "LS%20(\'6\')%20WHERE%20(uod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 4", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_4%20EQUALS%20(" +
            "\'15\')%20WHERE%20(etd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 5", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_5%20NOT%20EQUA" +
            "LS%20(\'16\')%20WHERE%20(etd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 6", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_6%20EQUALS%20(" +
            "\'17\')%20WHERE%20(nuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Level 7", "applications?$filter=(applicationDeviceOwnerDepartmentLevelFieldId_7%20NOT%20EQUA" +
            "LS%20(\'18\')%20WHERE%20(iod%2Cetd%2Cuod))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Organisation", "Device Owner Department Name", "applications?$filter=(deviceOwnerDepartmentName%20NOT%20EQUALS%20(\'Marketing\'%2C\'" +
            "Application%20Development\')%20WHERE%20(uod%2Cetd))", null)]
        [NUnit.Framework.TestCaseAttribute("Device Owner Custom Fields", "Device Owner Zip Code", "applications?$filter=(deviceOwnerCustomField_34%20CONTAINS%20(\'EC1\')%20WHERE%20(u" +
            "od%2Cetd%2Ciod))", null)]
        [NUnit.Framework.TestCaseAttribute("Automations", "X-Proj Paths", "applications?$filter=(automationField_16%20NOT%20EQUALS%20(\'337\'%2C\'336\'))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User (Saved List)", "applications?$filter=(userSavedListId%20NOT%20EQUALS%20(\'61\'%2C\'38\')%20WHERE%20(h" +
            "ua%2Ceta%2Codwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User", "applications?$filter=(user%20EQUALS%20(\'25833\'%2C\'26113\'%2C\'27427\'%2C\'26448\')%20W" +
            "HERE%20(odwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Common Name", "applications?$filter=(userCommonObjectName%20CONTAINS%20(\'Lisa\'%2C\'John\'%2C\'Micha" +
            "el\')%20WHERE%20(hua%2Ceta%2Codwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Compliance", "applications?$filter=(userCompliance%20EQUALS%20(\'Unknown\'%2C\'None\')%20WHERE%20(d" +
            "nodwaiio%2Cdnodwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Dashworks First Seen", "applications?$filter=(userDashworksFirstSeenDate%20IS%20EMPTY%20()%20WHERE%20(dno" +
            "dwaiet%2Cdnodwawuo%2Cdnodwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Description", "applications?$filter=(userDescription%20NOT%20CONTAINS%20(\'it\'%2C\'the\')%20WHERE%2" +
            "0(hua))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Device Count", "applications?$filter=(userDevices%20>%3D%202%20WHERE%20(eta%2Chua))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Directory Type", "applications?$filter=(userDirectoryType%20IS%20NOT%20EMPTY%20()%20WHERE%20(hua%2C" +
            "odwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Display Name", "applications?$filter=(userDisplayName%20IS%20NOT%20EMPTY%20()%20WHERE%20(hua%2Cet" +
            "a%2Codwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Distinguished Name", "applications?$filter=(userFullyDistinguishedObjectName%20BEGINS%20WITH%20(\'li\'%2C" +
            "\'to\'%2C\'ma\')%20WHERE%20(hua%2Ceta))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Domain", "applications?$filter=(userDomain%20EQUALS%20(\'NULL\'%2C\'BCLABS\'%2C\'CORP\')%20WHERE%" +
            "20(hnua%2Cneta))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Email Address", "applications?$filter=(userEmailAddress%20DOES%20NOT%20END%20WITH%20(\'.co.uk\')%20W" +
            "HERE%20(hua%2Codwawuo%2Ceta))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Enabled", "applications?$filter=(userEnabled%20EQUALS%20(\'0\'%2C\'NULL\')%20WHERE%20(hua%2Ceta%" +
            "2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Given Name", "applications?$filter=(userGivenName%20ENDS%20WITH%20(\'smith\')%20WHERE%20(dnodwaie" +
            "t%2Cdnodwawuo%2Cneta))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Group Count", "applications?$filter=(userGroupCount%20<%201%20WHERE%20(hua%2Ceta%2Codwawuo%2Codw" +
            "aiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User GUID", "applications?$filter=(userGUID%20NOT%20CONTAINS%20(\'vineivi\'%2C\'hydewwue\')%20WHER" +
            "E%20(hua%2Ceta))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Home Directory", "applications?$filter=(userHomeDirectory%20IS%20NOT%20EMPTY%20()%20WHERE%20(odwawu" +
            "o%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Home Drive", "applications?$filter=(userHomeDrive%20CONTAINS%20(\'H\')%20WHERE%20(odwaiet%2Codwai" +
            "io%2Codwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Key", "applications?$filter=(userKey%20%3D%201000%20WHERE%20(hua%2Ceta%2Codwawuo%2Codwai" +
            "et%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Last Logon Date", "applications?$filter=(userLastLogonDate%20>%3D%20(\'2010-01-01\')%20WHERE%20(hua%2C" +
            "eta))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Mailbox Count (Access)", "applications?$filter=(userAccessibleMailboxesCount%20>%3D%201%20WHERE%20(hua%2Cet" +
            "a%2Codwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Organizational Unit", "applications?$filter=(userOrganizationalUnit%20IS%20EMPTY%20()%20WHERE%20(hua%2Co" +
            "dwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Parent Distinguished Name", "applications?$filter=(userParentDistinguishedName%20NOT%20CONTAINS%20(\'sdthyjuki\'" +
            "%2C\'wefwrtn\'%2C\'xzxfcbgfgh\')%20WHERE%20(odwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User SID", "applications?$filter=(userSID%20IS%20NOT%20EMPTY%20()%20WHERE%20(dnodwaiio%2Cdnod" +
            "waiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Surname", "applications?$filter=(userSurname%20BEGINS%20WITH%20(\'Jon\'%2C\'Smi\'%2C\'Mar\')%20WHE" +
            "RE%20(eta%2Codwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User", "User Username", "applications?$filter=(userUsername%20NOT%20EQUALS%20(\'efwrthyu\'%2C\'sfrty567\')%20W" +
            "HERE%20(odwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User Building", "applications?$filter=(userBuilding%20NOT%20EQUALS%20(\'NULL\')%20WHERE%20(odwaiio%2" +
            "Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User City", "applications?$filter=(userCity%20EQUALS%20(\'Belfast\'%2C\'Calgary\'%2C\'Cardiff\'%2C\'E" +
            "dinburgh\')%20WHERE%20(eta%2Chua%2Codwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User Country", "applications?$filter=(userCountry%20IS%20NOT%20EMPTY%20()%20WHERE%20(hua%2Codwawu" +
            "o%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User Floor", "applications?$filter=(userFloor%20NOT%20EQUALS%20(\'NULL\'%2C\'0\'%2C\'1\')%20WHERE%20(" +
            "hua%2Ceta%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User Location Name", "applications?$filter=(userLocationName%20EQUALS%20(\'101%20Hudson%20Street%20F20\'%" +
            "2C\'101%20Hudson%20Street%20F21\'%2C\'120%20Collins%20Street%20F5\'%2C\'120%20Collins" +
            "%20Street%20F6\'%2C\'777%20Tower%20F11\')%20WHERE%20(odwaiio%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User Postal Code", "applications?$filter=(userPostalCode%20DOES%20NOT%20END%20WITH%20(\'1we\'%2C\'5t\')%2" +
            "0WHERE%20(odwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User Region", "applications?$filter=(userRegion%20EQUALS%20(\'NULL\'%2C\'AU\'%2C\'CA\'%2C\'US-E\'%2C\'US-" +
            "W\')%20WHERE%20(odwawuo%2Chua))", null)]
        [NUnit.Framework.TestCaseAttribute("User Location", "User State or County", "applications?$filter=(userStateCounty%20EQUALS%20(\'AB\'%2C\'CA\')%20WHERE%20(odwaiet" +
            "%2Codwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Cost Centre", "applications?$filter=(userCostCentre%20DOES%20NOT%20BEGIN%20WITH%20(\'rtg\'%2C\'sdf\'" +
            ")%20WHERE%20(eta%2Codwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department", "applications?$filter=(userAssociationDepartmentKey%20NOT%20EQUALS%20(\'14\'%2C\'2\')%" +
            "20WHERE%20(dnodwaiio%2Cdnodwaiet%2Cdnodwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Code", "applications?$filter=(userDepartmentCode%20IS%20NOT%20EMPTY%20()%20WHERE%20(odwaw" +
            "uo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Full Path", "applications?$filter=(userFullDepartmentPath%20CONTAINS%20(\'Marketing\'%2C\'Finance" +
            "\')%20WHERE%20(odwaiet%2Codwaiio%2Codwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 1", "applications?$filter=(applicationUserDepartmentLevelField_1%20EQUALS%20(\'2\'%2C\'1\'" +
            ")%20WHERE%20(dnodwaiet%2Chnua%2Cneta))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 2", "applications?$filter=(applicationUserDepartmentLevelField_2%20EQUALS%20(\'3\'%2C\'4\'" +
            "%2C\'8\'%2C\'10\')%20WHERE%20(odwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 3", "applications?$filter=(applicationUserDepartmentLevelField_3%20NOT%20EQUALS%20(\'6\'" +
            ")%20WHERE%20(hua%2Ceta%2Codwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 4", "applications?$filter=(applicationUserDepartmentLevelField_4%20EQUALS%20(\'15\')%20W" +
            "HERE%20(hua%2Ceta%2Codwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 5", "applications?$filter=(applicationUserDepartmentLevelField_5%20EQUALS%20(\'16\')%20W" +
            "HERE%20(dnodwaiio%2Cdnodwaiet%2Cdnodwawuo))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 6", "applications?$filter=(applicationUserDepartmentLevelField_6%20NOT%20EQUALS%20(\'17" +
            "\')%20WHERE%20(hua%2Ceta))", null)]
        [NUnit.Framework.TestCaseAttribute("User Organisation", "User Department Level 7", "applications?$filter=(applicationUserDepartmentLevelField_7%20EQUALS%20(\'18\')%20W" +
            "HERE%20(odwawuo%2Codwaiet))", null)]
        [NUnit.Framework.TestCaseAttribute("User Custom Fields", "Telephone", "applications?$filter=(userCustomField_33%20BEGINS%20WITH%20(\'44207\')%20WHERE%20(h" +
            "ua%2Ceta%2Codwawuo%2Codwaiet%2Codwaiio))", null)]
        [NUnit.Framework.TestCaseAttribute("User LDAP", "msexchmessagehygienescljunkthreshold", "applications?$filter=(userLDAPField_209%20EQUALS%20(\'4\')%20WHERE%20(neta%2Cdnodwa" +
            "wuo%2Cdnodwaiet%2Cdnodwaiio%2Chnua))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Application Rationalization", "applications?$filter=(project_48_applicationRationalisation%20NOT%20EQUALS%20(\'Fo" +
            "rward%20Path\'%2C\'Keep\'%2C\'Retire\'))&$select=packageName,packageManufacturer,pack" +
            "ageVersion,project_48_applicationRationalisation", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Application Readiness", "applications?$filter=(project_48_applicationReadinessId%20EQUALS%20(\'1417\'))&$sel" +
            "ect=packageName,packageManufacturer,packageVersion,project_48_applicationReadine" +
            "ss", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Capacity Unit", "applications?$filter=(project_48_capacityUnitId%20EQUALS%20(\'39\'))&$select=packag" +
            "eName,packageManufacturer,packageVersion,project_48_capacityUnit", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Category", "applications?$filter=(project_48_subCategoryId%20EQUALS%20(\'NULL\'))&$select=packa" +
            "geName,packageManufacturer,packageVersion,project_48_subCategory,project_48_subC" +
            "ategoryId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Core Application", "applications?$filter=(project_48_coreApplication%20NOT%20EQUALS%20(\'NULL\'))&$sele" +
            "ct=packageName,packageManufacturer,packageVersion,project_48_coreApplication", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Current Device Count", "applications?$filter=(project_48_currentDeviceCount%20%3D%200)&$select=packageNam" +
            "e,packageManufacturer,packageVersion,project_48_currentDeviceCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Current User Count", "applications?$filter=(project_48_currentUserCount%20<%3D%201)&$select=packageName" +
            ",packageManufacturer,packageVersion,project_48_currentUserCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Friendly Name", "applications?$filter=(project_48_friendlyName%20NOT%20CONTAINS%20(\'ergthy\'%2C\'sac" +
            "dvfbg\'))&$select=packageName,packageManufacturer,packageVersion,project_48_frien" +
            "dlyName", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Group (Current State)", "applications?$filter=(project_48_groupApplicationCurrent%20NOT%20EQUALS%20(\'716\'%" +
            "2C\'717\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Group (Target State)", "applications?$filter=(project_48_groupApplicationTarget%20NOT%20EQUALS%20(\'716\'%2" +
            "C\'717\'%2C\'719\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Hide from End Users", "applications?$filter=(project_48_hideFromEndUsers%20EQUALS%20(\'1\'%2C\'0\'))&$select" +
            "=packageName,packageManufacturer,packageVersion,project_48_hideFromEndUsers", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: In Scope", "applications?$filter=(project_48_inScope%20EQUALS%20(\'1\'))&$select=packageName,pa" +
            "ckageManufacturer,packageVersion,project_48_inScope,project_48_projectID", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Object ID", "applications?$filter=(project_48_objectId%20>%20100)&$select=packageName,packageM" +
            "anufacturer,packageVersion,project_48_objectId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Path", "applications?$filter=(project_48_pathId%20EQUALS%20(\'465\'))&$select=packageName,p" +
            "ackageManufacturer,packageVersion,project_48_path,project_48_pathId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Readiness", "applications?$filter=(project_48_ragStatusId%20NOT%20EQUALS%20(\'1407\'%2C\'1417\'))&" +
            "$select=packageName,packageManufacturer,packageVersion,project_48_ragStatus,proj" +
            "ect_48_ragStatusId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Status", "applications?$filter=(project_48_linkedObjectStatus%20EQUALS%20(\'Not%20Onboarded\'" +
            "%2C\'Onboarded\'))&$select=packageName,packageManufacturer,packageVersion,project_" +
            "48_linkedObjectStatus", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Tag", "applications?$filter=(project_48_tag%20NOT%20EQUALS%20(\'adf\'%2C\'Tag%201\'%2C\'tag1\'" +
            "))&$select=packageName,packageManufacturer,packageVersion,project_48_tag", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target App", "applications?$filter=(project_48_targetApplicationId%20EQUALS%20(\'61135\'%2C\'61136" +
            "\'%2C\'61137\'))&$select=packageName,packageManufacturer,packageVersion,project_48_" +
            "targetApplication", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target App Friendly Name", "applications?$filter=(project_48_targetApplicationFriendlyName%20IS%20NOT%20EMPTY" +
            "%20())&$select=packageName,packageManufacturer,packageVersion,project_48_targetA" +
            "pplicationFriendlyName", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target App ID", "applications?$filter=(project_48_targetObjectId%20<%3D%2061144)&$select=packageNa" +
            "me,packageManufacturer,packageVersion,project_48_targetObjectId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target App Key", "applications?$filter=(project_48_targetApplicationKey%20>%201)&$select=packageNam" +
            "e,packageManufacturer,packageVersion,project_48_targetApplicationKey", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target App Readiness", "applications?$filter=(project_48_targetApplicationReadinessId%20EQUALS%20(\'1410\'%" +
            "2C\'1411\'%2C\'1412\'%2C\'1407\'%2C\'1417\'%2C\'1415\'%2C\'1408\'%2C\'1409\'%2C\'1416\'))&$selec" +
            "t=packageName,packageManufacturer,packageVersion,project_48_targetApplicationRea" +
            "diness", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target Device Count", "applications?$filter=(project_48_targetDeviceCount%20<%3D%202)&$select=packageNam" +
            "e,packageManufacturer,packageVersion,project_48_targetDeviceCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: EmailMigra", "EmailMigra: Target User Count", "applications?$filter=(project_48_targetUserCount%20>%3D%200)&$select=packageName," +
            "packageManufacturer,packageVersion,project_48_targetUserCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: EmailMigra", "EmailMigra: Comms & Exceptions \\ Workflow for Applications", "applications?$filter=(project_task_48_13186_1_Task_Value%20EQUALS%20(\'1\'%2C\'2\'))&" +
            "$select=packageName,packageManufacturer,packageVersion,project_task_48_13186_1_T" +
            "ask", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: EmailMigra", "EmailMigra: Sync Status \\ Application Radiobutton Non RAG Date Owner", "applications?$filter=(project_task_48_13194_1_Task_Value%20EQUALS%20(\'1\'))&$selec" +
            "t=packageName,packageManufacturer,packageVersion,project_task_48_13194_1_Task", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: EmailMigra", "EmailMigra: Sync Status \\ Application Radiobutton Non RAG Date Owner (Date)", "applications?$filter=(project_task_48_13194_1_date%20<>%20\'2019-09-11\')&$select=p" +
            "ackageName,packageManufacturer,packageVersion,project_task_48_13194_1_date", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: EmailMigra", "EmailMigra: Sync Status \\ Application Radiobutton Non RAG Date Owner (Owner)", "applications?$filter=(project_task_48_13194_1_ownerId%20NOT%20EQUALS%20(\'00000000" +
            "-0000-0000-0000-000000000000\'))&$select=packageName,packageManufacturer,packageV" +
            "ersion,project_task_48_13194_1_owner", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: EmailMigra", "EmailMigra: Sync Status \\ Application Radiobutton Non RAG Date Owner (Team)", "applications?$filter=(project_task_48_13194_1_teamId%20EQUALS%20(\'-1\'%2C\'2836\'%2C" +
            "\'41\'))&$select=packageName,packageManufacturer,packageVersion,project_task_48_13" +
            "194_1_team", null)]
        [NUnit.Framework.TestCaseAttribute("Project Stages: EmailMigra", "EmailMigra: Comms & Exceptions", "applications?$filter=(project_stage_48_364_stageValueId%20EQUALS%20(\'1407\'%2C\'141" +
            "7\'%2C\'1416\'))&$select=packageName,packageManufacturer,packageVersion,project_sta" +
            "ge_48_364_stageValue", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Application Rationalization", "applications?$filter=(project_56_applicationRationalisation%20NOT%20EQUALS%20(\'Fo" +
            "rward%20Path\'%2C\'Uncategorised\'))&$select=packageName,packageManufacturer,packag" +
            "eVersion,project_56_applicationRationalisation", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Application Readiness", "applications?$filter=(project_56_applicationReadinessId%20EQUALS%20(\'1462\'%2C\'147" +
            "1\'%2C\'1470\'%2C\'1472\'))&$select=packageName,packageManufacturer,packageVersion,pr" +
            "oject_56_applicationReadiness", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Capacity Unit", "applications?$filter=(project_56_capacityUnitId%20EQUALS%20(\'59\'%2C\'102\'%2C\'63\'))" +
            "&$select=packageName,packageManufacturer,packageVersion,project_56_capacityUnit", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Category", "applications?$filter=(project_56_subCategoryId%20NOT%20EQUALS%20(\'373\'))&$select=" +
            "packageName,packageManufacturer,packageVersion,project_56_subCategory,project_56" +
            "_subCategoryId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Core Application", "applications?$filter=(project_56_coreApplication%20EQUALS%20(\'0\'%2C\'1\'))&$select=" +
            "packageName,packageManufacturer,packageVersion,project_56_coreApplication", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Current Device Count", "applications?$filter=(project_56_currentDeviceCount%20>%3D%201)&$select=packageNa" +
            "me,packageManufacturer,packageVersion,project_56_currentDeviceCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Current User Count", "applications?$filter=(project_56_currentUserCount%20<%3D%202)&$select=packageName" +
            ",packageManufacturer,packageVersion,project_56_currentUserCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Friendly Name", "applications?$filter=(project_56_friendlyName%20NOT%20CONTAINS%20(\'fergthy\'%2C\'as" +
            "dvfbgh\'%2C\'sdfgh\'))&$select=packageName,packageManufacturer,packageVersion,proje" +
            "ct_56_friendlyName", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Group (Current State)", "applications?$filter=(project_56_groupApplicationCurrent%20EQUALS%20(\'820\'%2C\'816" +
            "\'%2C\'851\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Group (Target State)", "applications?$filter=(project_56_groupApplicationTarget%20EQUALS%20(\'820\'%2C\'825\'" +
            "%2C\'850\'%2C\'849\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Hide from End Users", "applications?$filter=(project_56_hideFromEndUsers%20EQUALS%20(\'1\'%2C\'NULL\'))&$sel" +
            "ect=packageName,packageManufacturer,packageVersion,project_56_hideFromEndUsers", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: In Scope", "applications?$filter=(project_56_inScope%20EQUALS%20(\'0\'))&$select=packageName,pa" +
            "ckageManufacturer,packageVersion,project_56_inScope,project_56_projectID", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Object ID", "applications?$filter=(project_56_objectId%20IS%20NOT%20EMPTY%20())&$select=packag" +
            "eName,packageManufacturer,packageVersion,project_56_objectId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Path", "applications?$filter=(project_56_pathId%20EQUALS%20(\'500\'%2C\'503\'))&$select=packa" +
            "geName,packageManufacturer,packageVersion,project_56_path,project_56_pathId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Readiness", "applications?$filter=(project_56_ragStatusId%20EQUALS%20(\'1462\'%2C\'1465\'%2C\'1470\'" +
            "%2C\'1472\'%2C\'1471\'))&$select=packageName,packageManufacturer,packageVersion,proj" +
            "ect_56_ragStatus,project_56_ragStatusId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Status", "applications?$filter=(project_56_linkedObjectStatus%20NOT%20EQUALS%20(\'Offboarded" +
            "\'%2C\'Not%20Onboarded\'))&$select=packageName,packageManufacturer,packageVersion,p" +
            "roject_56_linkedObjectStatus", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Tag", "applications?$filter=(project_56_tag%20NOT%20EQUALS%20(\'tag2\'%2C\'tag1\'%2C\'tag\'))&" +
            "$select=packageName,packageManufacturer,packageVersion,project_56_tag", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target App", "applications?$filter=(project_56_targetApplicationId%20EQUALS%20(\'101547\'%2C\'1029" +
            "15\'%2C\'102981\'))&$select=packageName,packageManufacturer,packageVersion,project_" +
            "56_targetApplication", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target App Friendly Name", "applications?$filter=(project_56_targetApplicationFriendlyName%20IS%20NOT%20EMPTY" +
            "%20())&$select=packageName,packageManufacturer,packageVersion,project_56_targetA" +
            "pplicationFriendlyName", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target App ID", "applications?$filter=(project_56_targetObjectId%20<>%201)&$select=packageName,pac" +
            "kageManufacturer,packageVersion,project_56_targetObjectId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target App Key", "applications?$filter=(project_56_targetApplicationKey%20>%3D%201000)&$select=pack" +
            "ageName,packageManufacturer,packageVersion,project_56_targetApplicationKey", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target App Readiness", "applications?$filter=(project_56_targetApplicationReadinessId%20EQUALS%20(\'1462\'%" +
            "2C\'1471\'%2C\'1472\'%2C\'1469\'%2C\'1468\'))&$select=packageName,packageManufacturer,pa" +
            "ckageVersion,project_56_targetApplicationReadiness", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target Device Count", "applications?$filter=(project_56_targetDeviceCount%20<>%201)&$select=packageName," +
            "packageManufacturer,packageVersion,project_56_targetDeviceCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: UserEvergr", "UserEvergr: Target User Count", "applications?$filter=(project_56_targetUserCount%20<%3D%202)&$select=packageName," +
            "packageManufacturer,packageVersion,project_56_targetUserCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 1 \\ Text Task (App)", "applications?$filter=(project_task_56_13257_3_Task%20IS%20EMPTY%20())&$select=pac" +
            "kageName,packageManufacturer,packageVersion,project_task_56_13257_3_Task", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Application Delivery Date", "applications?$filter=(project_task_56_13256_2_Task%20AFTER%20RELATIVE%20(250_day_" +
            "ago))&$select=packageName,packageManufacturer,packageVersion,project_task_56_132" +
            "56_2_Task", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Application Delivery Date (Slot)", "applications?$filter=(project_task_56_13256_2_taskSlotId%20EQUALS%20(\'NULL\'%2C\'33" +
            "\'))&$select=packageName,packageManufacturer,packageVersion,project_task_56_13256" +
            "_2_taskSlot", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Dropdown Non RAG Date Time Owner (Application)", "applications?$filter=(project_task_56_13259_4_Task_Value%20EQUALS%20(\'2\'))&$selec" +
            "t=packageName,packageManufacturer,packageVersion,project_task_56_13259_4_Task", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Dropdown Non RAG Date Time Owner (Application) (Date)", "applications?$filter=(project_task_56_13259_4_date%20<>%20\'2019-09-11\')&$select=p" +
            "ackageName,packageManufacturer,packageVersion,project_task_56_13259_4_date", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Dropdown Non RAG Date Time Owner (Application) (Owner)", "applications?$filter=(project_task_56_13259_4_ownerId%20EQUALS%20(\'00000000-0000-" +
            "0000-0000-000000000000\'%2C\'f98fa56f-e271-47ff-a90e-31e2f02748b3\'))&$select=packa" +
            "geName,packageManufacturer,packageVersion,project_task_56_13259_4_owner", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Dropdown Non RAG Date Time Owner (Application) (Slot)", "applications?$filter=(project_task_56_13259_4_taskSlotId%20NOT%20EQUALS%20(\'34\'%2" +
            "C\'33\'))&$select=packageName,packageManufacturer,packageVersion,project_task_56_1" +
            "3259_4_taskSlot", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 2 \\ Dropdown Non RAG Date Time Owner (Application) (Team)", "applications?$filter=(project_task_56_13259_4_teamId%20EQUALS%20(\'-1\'%2C\'41\'%2C\'3" +
            "\'))&$select=packageName,packageManufacturer,packageVersion,project_task_56_13259" +
            "_4_team", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 3 \\ Radiobutton Readiness Date Owner (Application)", "applications?$filter=(project_task_56_13258_1_Task_Value%20EQUALS%20(\'1\'%2C\'3\'))&" +
            "$select=packageName,packageManufacturer,packageVersion,project_task_56_13258_1_T" +
            "ask", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 3 \\ Radiobutton Readiness Date Owner (Application) (Date)", "applications?$filter=(project_task_56_13258_1_date%20BETWEEN%20(2018-12-01_2018-1" +
            "2-31))&$select=packageName,packageManufacturer,packageVersion,project_task_56_13" +
            "258_1_date", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 3 \\ Radiobutton Readiness Date Owner (Application) (Owner)", "applications?$filter=(project_task_56_13258_1_ownerId%20NOT%20EQUALS%20(\'971c8e3d" +
            "-3c65-4e8e-b819-e1b4c8b1ed74\'%2C\'5982612e-d7e5-42d7-b967-7e17b9eaa973\'))&$select" +
            "=packageName,packageManufacturer,packageVersion,project_task_56_13258_1_owner", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 3 \\ Radiobutton Readiness Date Owner (Application) (Slot)", "applications?$filter=(project_task_56_13258_1_taskSlotId%20NOT%20EQUALS%20(\'35\'%2" +
            "C\'36\'%2C\'34\'%2C\'37\'))&$select=packageName,packageManufacturer,packageVersion,pro" +
            "ject_task_56_13258_1_taskSlot", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: UserEvergr", "UserEvergr: Stage 3 \\ Radiobutton Readiness Date Owner (Application) (Team)", "applications?$filter=(project_task_56_13258_1_teamId%20EQUALS%20(\'-1\'%2C\'41\'%2C\'2" +
            "834\'%2C\'6\'))&$select=packageName,packageManufacturer,packageVersion,project_task" +
            "_56_13258_1_team", null)]
        [NUnit.Framework.TestCaseAttribute("Project Stages: UserEvergr", "UserEvergr: Stage 3", "applications?$filter=(project_stage_56_376_stageValueId%20EQUALS%20(\'1462\'%2C\'147" +
            "2\'%2C\'1463\'%2C\'1465\'%2C\'1471\'))&$select=packageName,packageManufacturer,packageV" +
            "ersion,project_stage_56_376_stageValue", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Application Rationalization", "applications?$filter=(project_1_applicationRationalisation%20EQUALS%20(\'Uncategor" +
            "ised\'%2C\'Forward%20Path\'))&$select=packageName,packageManufacturer,packageVersio" +
            "n,project_1_applicationRationalisation&$orderby=project_1_applicationRationalisa" +
            "tion%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Application Readiness", "applications?$filter=(project_1_applicationReadinessId%20NOT%20EQUALS%20(\'1001\'%2" +
            "C\'1003\'%2C\'1004\'))&$select=packageName,packageManufacturer,packageVersion,projec" +
            "t_1_applicationReadiness", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Capacity Unit", "applications?$filter=(project_1_capacityUnitId%20EQUALS%20(\'2\'%2C\'60\'))&$select=p" +
            "ackageName,packageManufacturer,packageVersion,project_1_capacityUnit&$orderby=pr" +
            "oject_1_capacityUnit%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Category", "applications?$filter=(project_1_subCategoryId%20EQUALS%20(\'NULL\'))&$select=packag" +
            "eName,packageManufacturer,packageVersion,project_1_subCategory,project_1_subCate" +
            "goryId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Core Application", "applications?$filter=(project_1_coreApplication%20EQUALS%20(\'0\'%2C\'1\'))&$select=p" +
            "ackageName,packageManufacturer,packageVersion,project_1_coreApplication", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Current Device Count", "applications?$filter=(project_1_currentDeviceCount%20>%3D%2010)&$select=packageNa" +
            "me,packageManufacturer,packageVersion,project_1_currentDeviceCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Current User Count", "applications?$filter=(project_1_currentUserCount%20<%3D%2010)&$select=packageName" +
            ",packageManufacturer,packageVersion,project_1_currentUserCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Friendly Name", "applications?$filter=(project_1_friendlyName%20IS%20NOT%20EMPTY%20())&$select=pac" +
            "kageName,packageManufacturer,packageVersion,project_1_friendlyName", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Group (Current State)", "applications?$filter=(project_1_groupApplicationCurrent%20EQUALS%20(\'101\'%2C\'166\'" +
            "%2C\'100\'%2C\'98\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Group (Target State)", "applications?$filter=(project_1_groupApplicationTarget%20EQUALS%20(\'101\'%2C\'100\'%" +
            "2C\'27\'%2C\'125\'%2C\'149\'))", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Hide from End Users", "applications?$filter=(project_1_hideFromEndUsers%20EQUALS%20(\'1\'%2C\'0\'))&$select=" +
            "packageName,packageManufacturer,packageVersion,project_1_hideFromEndUsers", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: In Scope", "applications?$filter=(project_1_inScope%20EQUALS%20(\'1\'))&$select=packageName,pac" +
            "kageManufacturer,packageVersion,project_1_inScope,project_1_projectID", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Object ID", "applications?$filter=(project_1_objectId%20>%3D%2045)&$select=packageName,package" +
            "Manufacturer,packageVersion,project_1_objectId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Path", "applications?$filter=(project_1_pathId%20EQUALS%20(\'123\'%2C\'139\'))&$select=packag" +
            "eName,packageManufacturer,packageVersion,project_1_path,project_1_pathId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Readiness", "applications?$filter=(project_1_ragStatusId%20NOT%20EQUALS%20(\'1000\'%2C\'1010\'%2C\'" +
            "1009\'))&$select=packageName,packageManufacturer,packageVersion,project_1_ragStat" +
            "us,project_1_ragStatusId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Status", "applications?$filter=(project_1_linkedObjectStatus%20EQUALS%20(\'Offboarded\'%2C\'On" +
            "boarded\'))&$select=packageName,packageManufacturer,packageVersion,project_1_link" +
            "edObjectStatus", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Tag", "applications?$filter=(project_1_tag%20NOT%20EQUALS%20(\'adf\'%2C\'legal\'%2C\'tag\'%2C\'" +
            "Tag%201\'%2C\'tag1\'%2C\'tag2\'%2C\'VIP\'%2C\'Today\'%2C\'taggg\'%2C\'tagg\'))&$select=packag" +
            "eName,packageManufacturer,packageVersion,project_1_tag", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target App", "applications?$filter=(project_1_targetApplicationId%20EQUALS%20(\'17445\'%2C\'18003\'" +
            "%2C\'17603\'%2C\'17665\'))&$select=packageName,packageManufacturer,packageVersion,pr" +
            "oject_1_targetApplication", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target App Friendly Name", "applications?$filter=(project_1_targetApplicationFriendlyName%20CONTAINS%20(\'micr" +
            "osoft\'%2C\'adobe\'))&$select=packageName,packageManufacturer,packageVersion,projec" +
            "t_1_targetApplicationFriendlyName", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target App ID", "applications?$filter=(project_1_targetObjectId%20>%3D%20100)&$select=packageName," +
            "packageManufacturer,packageVersion,project_1_targetObjectId", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target App Key", "applications?$filter=(project_1_targetApplicationKey%20<%3D%202000)&$select=packa" +
            "geName,packageManufacturer,packageVersion,project_1_targetApplicationKey", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target App Readiness", @"applications?$filter=(project_1_targetApplicationReadinessId%20EQUALS%20('1000'%2C'1009'%2C'1007'%2C'1006'%2C'1001'))&$select=packageName,packageManufacturer,packageVersion,project_1_targetApplicationReadiness&$orderby=project_1_targetApplicationReadiness%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target Device Count", "applications?$filter=(project_1_targetDeviceCount%20>%202)&$select=packageName,pa" +
            "ckageManufacturer,packageVersion,project_1_targetDeviceCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project: Windows7Mi", "Windows7Mi: Target User Count", "applications?$filter=(project_1_targetUserCount%20<%3D%2010)&$select=packageName," +
            "packageManufacturer,packageVersion,project_1_targetUserCount", null)]
        [NUnit.Framework.TestCaseAttribute("Project Rings: Windows7Mi", "Windows7Mi: First Ring (Device Only, Current or Target State)", "applications?$filter=(project_1_deviceOnlyCurrentOrTargetFirstRingId%20EQUALS%20(" +
            "\'1\'))&$select=packageName,packageManufacturer,packageVersion,project_1_deviceOnl" +
            "yCurrentOrTargetFirstRing", null)]
        [NUnit.Framework.TestCaseAttribute("Project Rings: Windows7Mi", "Windows7Mi: First Ring (Device Only, Current State)", "applications?$filter=(project_1_deviceOnlyCurrentFirstRingId%20EQUALS%20(\'69\'))&$" +
            "select=packageName,packageManufacturer,packageVersion,project_1_deviceOnlyCurren" +
            "tFirstRing", null)]
        [NUnit.Framework.TestCaseAttribute("Project Rings: Windows7Mi", "Windows7Mi: First Ring (Device Only, Target State)", "applications?$filter=(project_1_deviceOnlyTargetFirstRingId%20NOT%20EQUALS%20(\'68" +
            "\'%2C\'69\'))&$select=packageName,packageManufacturer,packageVersion,project_1_devi" +
            "ceOnlyTargetFirstRing", null)]
        [NUnit.Framework.TestCaseAttribute("Project Rings: Windows7Mi", "Windows7Mi: Ring (Device Only, Current or Target State)", "applications?$filter=(project_1_deviceOnlyCurrentOrTargetRingId%20EQUALS%20(\'69\')" +
            ")&$select=packageName,packageManufacturer,packageVersion,project_1_deviceOnlyCur" +
            "rentOrTargetRing", null)]
        [NUnit.Framework.TestCaseAttribute("Project Rings: Windows7Mi", "Windows7Mi: Ring (Device Only, Current State)", "applications?$filter=(project_1_deviceOnlyCurrentRingId%20NOT%20EQUALS%20(\'1\'))&$" +
            "select=packageName,packageManufacturer,packageVersion,project_1_deviceOnlyCurren" +
            "tRing", null)]
        [NUnit.Framework.TestCaseAttribute("Project Rings: Windows7Mi", "Windows7Mi: Ring (Device Only, Target State)", "applications?$filter=(project_1_deviceOnlyTargetRingId%20EQUALS%20(\'1\'%2C\'69\'%2C\'" +
            "68\'))&$select=packageName,packageManufacturer,packageVersion,project_1_deviceOnl" +
            "yTargetRing", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Package AD Group Name", @"applications?$filter=(project_task_1_7_3_Task%20EQUALS%20('CRYXZSNRXUBPSGXZAZICRRWACBJBIBZINDZHVDDQVYHEEWKVSEMIUQMKVYVYIMIVVTCPHPDWVRHSKSVGQNIEOQNWQOMXIFIJQLILTVOCAQNCITZCDPHUDEHEFFZSDGOQJYCZJJMVYGEYCKOWPJTTXNFLEDGOVWYTBXTKQZSTCLVWAICUQCDUNVSWSRVGDYACIKWFREFP'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_7_3_Task&$orderby=project_task_1_7_3_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Package Delivery Date", "applications?$filter=(project_task_1_6_2_Task%20>%3D%20\'2018-03-23\')&$select=pack" +
            "ageName,packageManufacturer,packageVersion,project_task_1_6_2_Task&$orderby=proj" +
            "ect_task_1_6_2_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Package Delivery Date (Slot)", "applications?$filter=(project_task_1_6_2_taskSlotId%20NOT%20EQUALS%20(\'1\'%2C\'2\'%2" +
            "C\'31\'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_6_" +
            "2_taskSlot&$orderby=project_task_1_6_2_taskSlot%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task2", "applications?$filter=(project_task_1_481_1_Task_Value%20EQUALS%20(\'1\'%2C\'5\'%2C\'3\'" +
            "))&$select=packageName,packageManufacturer,packageVersion,project_task_1_481_1_T" +
            "ask&$orderby=project_task_1_481_1_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task2 (Date)", "applications?$filter=(project_task_1_481_1_date%20IS%20EMPTY%20())&$select=packag" +
            "eName,packageManufacturer,packageVersion,project_task_1_481_1_date&$orderby=proj" +
            "ect_task_1_481_1_date%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task2 (Owner)", @"applications?$filter=(project_task_1_481_1_ownerId%20EQUALS%20('00000000-0000-0000-0000-000000000000'%2C'f98fa56f-e271-47ff-a90e-31e2f02748b3'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_481_1_owner&$orderby=project_task_1_481_1_owner%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task2 (Team)", "applications?$filter=(project_task_1_481_1_teamId%20NOT%20EQUALS%20(\'41\'%2C\'3\'%2C" +
            "\'48\'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_481" +
            "_1_team&$orderby=project_task_1_481_1_team%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task3", "applications?$filter=(project_task_1_482_1_Task_Value%20EQUALS%20(\'4\'%2C\'3\'))&$se" +
            "lect=packageName,packageManufacturer,packageVersion,project_task_1_482_1_Task&$o" +
            "rderby=project_task_1_482_1_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task3 (Date)", "applications?$filter=(project_task_1_482_1_date%20AFTER%20RELATIVE%20(100000_hour" +
            "_ago))&$select=packageName,packageManufacturer,packageVersion,project_task_1_482" +
            "_1_date&$orderby=project_task_1_482_1_date%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task3 (Owner)", @"applications?$filter=(project_task_1_482_1_ownerId%20NOT%20EQUALS%20('6b21012d-728c-4d78-89af-88aaab70a1e9'%2C'4b062dc1-6475-40f9-8363-af58c6632331'%2C'f98fa56f-e271-47ff-a90e-31e2f02748b3'%2C'971c8e3d-3c65-4e8e-b819-e1b4c8b1ed74'%2C'5982612e-d7e5-42d7-b967-7e17b9eaa973'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_482_1_owner", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task3 (Team)", "applications?$filter=(project_task_1_482_1_teamId%20EQUALS%20(\'-1\'))&$select=pack" +
            "ageName,packageManufacturer,packageVersion,project_task_1_482_1_team", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task4 - RAG with Due Date", "applications?$filter=(project_task_1_483_1_Task_Value%20NOT%20EQUALS%20(\'1\'%2C\'2\'" +
            "))&$select=packageName,packageManufacturer,packageVersion,project_task_1_483_1_T" +
            "ask&$orderby=project_task_1_483_1_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task4 - RAG with Due Date (Date)", "applications?$filter=(project_task_1_483_1_date%20DOES%20NOT%20EQUAL%20RELATIVE%2" +
            "0(100_day_ago))&$select=packageName,packageManufacturer,packageVersion,project_t" +
            "ask_1_483_1_date&$orderby=project_task_1_483_1_date%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task5 - Non-RAG with Due Date", "applications?$filter=(project_task_1_484_1_Task_Value%20EQUALS%20(\'1\'%2C\'2\'))&$se" +
            "lect=packageName,packageManufacturer,packageVersion,project_task_1_484_1_Task&$o" +
            "rderby=project_task_1_484_1_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Task5 - Non-RAG with Due Date (Da" +
            "te)", "applications?$filter=(project_task_1_484_1_date%20<>%20\'2019-09-09\')&$select=pack" +
            "ageName,packageManufacturer,packageVersion,project_task_1_484_1_date&$orderby=pr" +
            "oject_task_1_484_1_date%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Test", "applications?$filter=(project_task_1_480_1_Task_Value%20EQUALS%20(\'2\'%2C\'3\'%2C\'5\'" +
            "))&$select=packageName,packageManufacturer,packageVersion,project_task_1_480_1_T" +
            "ask&$orderby=project_task_1_480_1_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Test (Date)", "applications?$filter=(project_task_1_480_1_date%20>%20\'2011-07-20\')&$select=packa" +
            "geName,packageManufacturer,packageVersion,project_task_1_480_1_date&$orderby=pro" +
            "ject_task_1_480_1_date%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Test (Owner)", @"applications?$filter=(project_task_1_480_1_ownerId%20EQUALS%20('00000000-0000-0000-0000-000000000000'%2C'ec3b3b0b-705b-41f2-ac99-4b65da3d7f44'%2C'ab128d57-9570-4539-b658-6b07f07fc49a'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_480_1_owner&$orderby=project_task_1_480_1_owner%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Technical Test (Team)", "applications?$filter=(project_task_1_480_1_teamId%20NOT%20EQUALS%20(\'2836\'%2C\'41\'" +
            "%2C\'3\'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_4" +
            "80_1_team", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Workflow for Applications (Default RT)", "applications?$filter=(project_task_1_13184_1_Task_Value%20EQUALS%20(\'1\'%2C\'3\'))&$" +
            "select=packageName,packageManufacturer,packageVersion,project_task_1_13184_1_Tas" +
            "k&$orderby=project_task_1_13184_1_Task%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Application Information \\ Workflow for Applications (RT1)", "applications?$filter=(project_task_1_13183_1_Task_Value%20EQUALS%20(\'1\'%2C\'6\'%2C\'" +
            "8\'))&$select=packageName,packageManufacturer,packageVersion,project_task_1_13183" +
            "_1_Task&$orderby=project_task_1_13183_1_Task%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Communication \\ Send an Email to the end User", "applications?$filter=(project_task_1_12861_1_Task_Value%20NOT%20EQUALS%20(\'2\'%2C\'" +
            "3\'%2C\'4\'%2C\'5\'))&$select=packageName,packageManufacturer,packageVersion,project_" +
            "task_1_12861_1_Task", null)]
        [NUnit.Framework.TestCaseAttribute("Project Tasks: Windows7Mi", "Windows7Mi: Communication \\ Send an Email to the end User (Date)", "applications?$filter=(project_task_1_12861_1_date%20IS%20EMPTY%20())&$select=pack" +
            "ageName,packageManufacturer,packageVersion,project_task_1_12861_1_date&$orderby=" +
            "project_task_1_12861_1_date%20desc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Stages: Windows7Mi", "Windows7Mi: Application Information", "applications?$filter=(project_stage_1_5_stageValueId%20NOT%20EQUALS%20(\'1001\'%2C\'" +
            "1003\'%2C\'1004\'))&$select=packageName,packageManufacturer,packageVersion,project_" +
            "stage_1_5_stageValue&$orderby=project_stage_1_5_stageValue%20asc", null)]
        [NUnit.Framework.TestCaseAttribute("Project Stages: Windows7Mi", "Windows7Mi: Communication", "applications?$filter=(project_stage_1_7_stageValueId%20EQUALS%20(\'1000\'%2C\'1001\'%" +
            "2C\'1008\'%2C\'1010\'%2C\'1003\'%2C\'1009\'))&$select=packageName,packageManufacturer,pa" +
            "ckageVersion,project_stage_1_7_stageValue&$orderby=project_stage_1_7_stageValue%" +
            "20desc", null)]
        public virtual void EvergreenJnr_ApplicationsList_CheckFiltersAndColumnsResponseData(string filterCategory, string filterName, string queryString, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Evergreen",
                    "Applications",
                    "API",
                    "FiltersAndColumns",
                    "DAS19261"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckFiltersAndColumnsResponseData", null, @__tags);
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 16
 testRunner.Then("Positive number of results returned for \'ApplicationsQueryUrls\' requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterCategory",
                        "FilterName",
                        "QueryString"});
            table1.AddRow(new string[] {
                        string.Format("{0}", filterCategory),
                        string.Format("{0}", filterName),
                        string.Format("{0}", queryString)});
#line 17
 testRunner.Then("Positive number of results returned for requests:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckUserPostalCodeOptionsDisplaying")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS17579")]
        public virtual void EvergreenJnr_ApplicationsList_CheckUserPostalCodeOptionsDisplaying()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckUserPostalCodeOptionsDisplayingInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckUserPostalCodeOptionsDisplayingInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckUserPostalCodeOptionsDisplaying", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns",
                        "DAS17579"});
#line 305
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperatorValues"});
            table2.AddRow(new string[] {
                        "Equals"});
            table2.AddRow(new string[] {
                        "Does not equal"});
            table2.AddRow(new string[] {
                        "Contains"});
            table2.AddRow(new string[] {
                        "Does not contain"});
            table2.AddRow(new string[] {
                        "Begins with"});
            table2.AddRow(new string[] {
                        "Does not begin with"});
            table2.AddRow(new string[] {
                        "Ends with"});
            table2.AddRow(new string[] {
                        "Does not end with"});
            table2.AddRow(new string[] {
                        "Empty"});
            table2.AddRow(new string[] {
                        "Not empty"});
#line 306
 testRunner.Then("following operators are displayed in \"User Location\" category for \"User Postal Co" +
                    "de\" filter on \"Applications\" page:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerCustomItemHasCorrectFilterOptio" +
            "ns")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        [NUnit.Framework.CategoryAttribute("DAS16485")]
        public virtual void EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerCustomItemHasCorrectFilterOptions()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerCustomItemHasCorrectFilterOptionsInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerCustomItemHasCorrectFilterOptionsInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerCustomItemHasCorrectFilterOptio" +
                    "ns", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns",
                        "DAS15194",
                        "DAS16485"});
#line 320
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperatorValues"});
            table3.AddRow(new string[] {
                        "Equals"});
            table3.AddRow(new string[] {
                        "Does not equal"});
            table3.AddRow(new string[] {
                        "Contains"});
            table3.AddRow(new string[] {
                        "Does not contain"});
            table3.AddRow(new string[] {
                        "Begins with"});
            table3.AddRow(new string[] {
                        "Does not begin with"});
            table3.AddRow(new string[] {
                        "Ends with"});
            table3.AddRow(new string[] {
                        "Does not end with"});
            table3.AddRow(new string[] {
                        "Empty"});
            table3.AddRow(new string[] {
                        "Not empty"});
#line 321
 testRunner.Then("following operators are displayed in \"Device Owner Custom Fields\" category for \"D" +
                    "evice Owner Zip Code\" filter on \"Applications\" page:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_AllLists_CheckThatBucketAndCapacityUnitSubcategoriesPlacedInEvergree" +
            "nCategoryInFiltersPanel")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS12940")]
        [NUnit.Framework.CategoryAttribute("DAS13201")]
        [NUnit.Framework.CategoryAttribute("DAS14325")]
        [NUnit.Framework.TestCaseAttribute("Devices", null)]
        [NUnit.Framework.TestCaseAttribute("Users", null)]
        [NUnit.Framework.TestCaseAttribute("Mailboxes", null)]
        public virtual void EvergreenJnr_AllLists_CheckThatBucketAndCapacityUnitSubcategoriesPlacedInEvergreenCategoryInFiltersPanel(string listName, string[] exampleTags)
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_AllLists_CheckThatBucketAndCapacityUnitSubcategoriesPlacedInEvergreenCategoryInFiltersPanelInternal(listName,exampleTags);
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_AllLists_CheckThatBucketAndCapacityUnitSubcategoriesPlacedInEvergreenCategoryInFiltersPanelInternal(string listName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Evergreen",
                    "Applications",
                    "API",
                    "FiltersAndColumns",
                    "DAS12940",
                    "DAS13201",
                    "DAS14325"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_AllLists_CheckThatBucketAndCapacityUnitSubcategoriesPlacedInEvergree" +
                    "nCategoryInFiltersPanel", null, @__tags);
#line 335
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table4.AddRow(new string[] {
                        "Evergreen Bucket"});
            table4.AddRow(new string[] {
                        "Evergreen Capacity Unit"});
            table4.AddRow(new string[] {
                        "Evergreen Ring"});
#line 336
 testRunner.Then(string.Format("the following filter subcategories are displayed for \'Evergreen\' category on \'{0}" +
                        "\' page:", listName), ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckThatCapacityUnitSubcategoryPlacedInEvergreenCa" +
            "tegoryInFiltersPanel")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS13201")]
        [NUnit.Framework.CategoryAttribute("DAS14325")]
        [NUnit.Framework.CategoryAttribute("DAS14325")]
        [NUnit.Framework.CategoryAttribute("DAS19309")]
        public virtual void EvergreenJnr_ApplicationsList_CheckThatCapacityUnitSubcategoryPlacedInEvergreenCategoryInFiltersPanel()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckThatCapacityUnitSubcategoryPlacedInEvergreenCategoryInFiltersPanelInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckThatCapacityUnitSubcategoryPlacedInEvergreenCategoryInFiltersPanelInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckThatCapacityUnitSubcategoryPlacedInEvergreenCa" +
                    "tegoryInFiltersPanel", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns",
                        "DAS13201",
                        "DAS14325",
                        "DAS14325",
                        "DAS19309"});
#line 349
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table5.AddRow(new string[] {
                        "Criticality"});
            table5.AddRow(new string[] {
                        "Evergreen Capacity Unit"});
            table5.AddRow(new string[] {
                        "Evergreen Rationalization"});
            table5.AddRow(new string[] {
                        "Evergreen Target App"});
            table5.AddRow(new string[] {
                        "Evergreen Target App Compliance"});
            table5.AddRow(new string[] {
                        "Evergreen Target App Key"});
            table5.AddRow(new string[] {
                        "Evergreen Target App Name"});
            table5.AddRow(new string[] {
                        "Evergreen Target App Vendor"});
            table5.AddRow(new string[] {
                        "Evergreen Target App Version"});
            table5.AddRow(new string[] {
                        "Hide From End Users"});
            table5.AddRow(new string[] {
                        "In Catalog"});
#line 350
 testRunner.Then("the following filter subcategories are displayed for \'Evergreen\' category on \'App" +
                    "lications\' page:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckStageNameInTheFiltestForApplicationsLists")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS15899")]
        public virtual void EvergreenJnr_ApplicationsList_CheckStageNameInTheFiltestForApplicationsLists()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckStageNameInTheFiltestForApplicationsListsInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckStageNameInTheFiltestForApplicationsListsInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckStageNameInTheFiltestForApplicationsLists", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns",
                        "DAS15899"});
#line 365
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table6.AddRow(new string[] {
                        "DeviceSche: Stage 2 \\ app date task"});
            table6.AddRow(new string[] {
                        "DeviceSche: Stage 2 \\ app radiobutton task"});
#line 366
 testRunner.Then("the following filter subcategories are displayed for \'Project Tasks: DeviceSche\' " +
                    "category on \'Applications\' page:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckThatOrderOfFiltersInDeviceHardwareCategory")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS17727")]
        public virtual void EvergreenJnr_ApplicationsList_CheckThatOrderOfFiltersInDeviceHardwareCategory()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckThatOrderOfFiltersInDeviceHardwareCategoryInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckThatOrderOfFiltersInDeviceHardwareCategoryInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckThatOrderOfFiltersInDeviceHardwareCategory", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns",
                        "DAS17727"});
#line 372
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table7.AddRow(new string[] {
                        "Device CPU Architecture"});
            table7.AddRow(new string[] {
                        "Device CPU Speed (GHz)"});
            table7.AddRow(new string[] {
                        "Device Format"});
            table7.AddRow(new string[] {
                        "Device HDD Total Size (GB)"});
            table7.AddRow(new string[] {
                        "Device IP Address"});
            table7.AddRow(new string[] {
                        "Device IP v6 Address"});
            table7.AddRow(new string[] {
                        "Device Manufacturer"});
            table7.AddRow(new string[] {
                        "Device Memory (GB)"});
            table7.AddRow(new string[] {
                        "Device Model"});
            table7.AddRow(new string[] {
                        "Device Target Drive Free Space (GB)"});
            table7.AddRow(new string[] {
                        "Device TPM Enabled"});
            table7.AddRow(new string[] {
                        "Device TPM Version"});
            table7.AddRow(new string[] {
                        "Device Type"});
            table7.AddRow(new string[] {
                        "Device Virtual Machine Host"});
#line 373
 testRunner.Then("the following filter subcategories are displayed for \'Device Hardware\' category o" +
                    "n \'Applications\' page:", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerFilterCategoryHasCorrectSubcate" +
            "gories")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Applications")]
        [NUnit.Framework.CategoryAttribute("API")]
        [NUnit.Framework.CategoryAttribute("FiltersAndColumns")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        [NUnit.Framework.CategoryAttribute("DAS17743")]
        public virtual void EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerFilterCategoryHasCorrectSubcategories()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerFilterCategoryHasCorrectSubcategoriesInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerFilterCategoryHasCorrectSubcategoriesInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckThatDeviceOwnerFilterCategoryHasCorrectSubcate" +
                    "gories", null, new string[] {
                        "Evergreen",
                        "Applications",
                        "API",
                        "FiltersAndColumns",
                        "DAS15194",
                        "DAS17743"});
#line 391
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table8.AddRow(new string[] {
                        "Device Owner"});
            table8.AddRow(new string[] {
                        "Device Owner (Saved List)"});
            table8.AddRow(new string[] {
                        "Device Owner Common Name"});
            table8.AddRow(new string[] {
                        "Device Owner Compliance"});
            table8.AddRow(new string[] {
                        "Device Owner Description"});
            table8.AddRow(new string[] {
                        "Device Owner Directory Type"});
            table8.AddRow(new string[] {
                        "Device Owner Display Name"});
            table8.AddRow(new string[] {
                        "Device Owner Distinguished Name"});
            table8.AddRow(new string[] {
                        "Device Owner Domain"});
            table8.AddRow(new string[] {
                        "Device Owner Email Address"});
            table8.AddRow(new string[] {
                        "Device Owner Enabled"});
            table8.AddRow(new string[] {
                        "Device Owner Given Name"});
            table8.AddRow(new string[] {
                        "Device Owner GUID"});
            table8.AddRow(new string[] {
                        "Device Owner Home Directory"});
            table8.AddRow(new string[] {
                        "Device Owner Home Drive"});
            table8.AddRow(new string[] {
                        "Device Owner Key"});
            table8.AddRow(new string[] {
                        "Device Owner Last Logon Date"});
            table8.AddRow(new string[] {
                        "Device Owner Organizational Unit"});
            table8.AddRow(new string[] {
                        "Device Owner Parent Distinguished Name"});
            table8.AddRow(new string[] {
                        "Device Owner SID"});
            table8.AddRow(new string[] {
                        "Device Owner Surname"});
            table8.AddRow(new string[] {
                        "Device Owner Username"});
#line 392
 testRunner.Then("the following filter subcategories are displayed for \'Device Owner\' category on \'" +
                    "Applications\' page:", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table9.AddRow(new string[] {
                        "Device Owner Building"});
            table9.AddRow(new string[] {
                        "Device Owner City"});
            table9.AddRow(new string[] {
                        "Device Owner Country"});
            table9.AddRow(new string[] {
                        "Device Owner Floor"});
            table9.AddRow(new string[] {
                        "Device Owner Location Name"});
            table9.AddRow(new string[] {
                        "Device Owner Postal Code"});
            table9.AddRow(new string[] {
                        "Device Owner Region"});
            table9.AddRow(new string[] {
                        "Device Owner State/County"});
#line 416
 testRunner.Then("the following filter subcategories are displayed for \'Device Owner Location\' cate" +
                    "gory on \'Applications\' page:", ((string)(null)), table9, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table10.AddRow(new string[] {
                        "Device Owner  Department Full Path"});
            table10.AddRow(new string[] {
                        "Device Owner Cost Centre"});
            table10.AddRow(new string[] {
                        "Device Owner Department"});
            table10.AddRow(new string[] {
                        "Device Owner Department Code"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 1"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 2"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 3"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 4"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 5"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 6"});
            table10.AddRow(new string[] {
                        "Device Owner Department Level 7"});
            table10.AddRow(new string[] {
                        "Device Owner Department Name"});
#line 426
 testRunner.Then("the following filter subcategories are displayed for \'Device Owner Organization\' " +
                    "category on \'Applications\' page:", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

    }
}
#pragma warning restore
#endregion

