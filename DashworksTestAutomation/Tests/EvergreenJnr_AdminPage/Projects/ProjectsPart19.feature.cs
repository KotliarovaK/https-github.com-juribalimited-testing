// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DashworksTestAutomation.Tests.EvergreenJnr_AdminPage.Projects
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProjectsPart19")]
    public partial class ProjectsPart19Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProjectsPart19.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProjectsPart19", "\tRuns Projects related tests on Admin page", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("User is logged in to the Evergreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Then("Evergreen Dashboards page should be displayed to the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ImportProjectPage_CheckSelectExistingProjectDropdownValuesOnImportPr" +
            "ojectPage")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_AdminPage")]
        [NUnit.Framework.CategoryAttribute("AdminPage")]
        [NUnit.Framework.CategoryAttribute("DAS13783")]
        [NUnit.Framework.CategoryAttribute("Projects")]
        [NUnit.Framework.CategoryAttribute("Do_Not_Run_With_Projects")]
        [NUnit.Framework.CategoryAttribute("Do_Not_Run_With_AdminPage")]
        public virtual void EvergreenJnr_ImportProjectPage_CheckSelectExistingProjectDropdownValuesOnImportProjectPage()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_ImportProjectPage_CheckSelectExistingProjectDropdownValuesOnImportProjectPageInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_ImportProjectPage_CheckSelectExistingProjectDropdownValuesOnImportProjectPageInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ImportProjectPage_CheckSelectExistingProjectDropdownValuesOnImportPr" +
                    "ojectPage", null, new string[] {
                        "Evergreen",
                        "Admin",
                        "EvergreenJnr_AdminPage",
                        "AdminPage",
                        "DAS13783",
                        "Projects",
                        "Do_Not_Run_With_Projects",
                        "Do_Not_Run_With_AdminPage"});
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 10
 testRunner.When("User clicks \'Admin\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("\'Admin\' list should be displayed to the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.When("User clicks \'IMPORT PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.And("User selects \"Import to existing project\" option in the \"Import\" dropdown on the " +
                    "Import Project Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "OptionLabel"});
            table1.AddRow(new string[] {
                        "*Project K-Computer Scheduled Project"});
            table1.AddRow(new string[] {
                        ":/"});
            table1.AddRow(new string[] {
                        "1803 Rollout"});
            table1.AddRow(new string[] {
                        "Babel (English, German and French)"});
            table1.AddRow(new string[] {
                        "Barry\'s User Project"});
            table1.AddRow(new string[] {
                        "Computer Scheduled Test (Jo)"});
            table1.AddRow(new string[] {
                        "Devices Evergreen Capacity Project"});
            table1.AddRow(new string[] {
                        "Email Migration"});
            table1.AddRow(new string[] {
                        "Havoc (Big Data)"});
            table1.AddRow(new string[] {
                        "I-Computer Scheduled Project"});
            table1.AddRow(new string[] {
                        "Mailbox Evergreen Capacity Project"});
            table1.AddRow(new string[] {
                        "Migration Project Phase 2 (User Project)"});
            table1.AddRow(new string[] {
                        "Project 00 M Computer Scheduled"});
            table1.AddRow(new string[] {
                        "Project using broken list as scope"});
            table1.AddRow(new string[] {
                        "Project with associated broken list"});
            table1.AddRow(new string[] {
                        "USE ME FOR AUTOMATION(DEVICE SCHDLD)"});
            table1.AddRow(new string[] {
                        "USE ME FOR AUTOMATION(MAIL SCHDLD)"});
            table1.AddRow(new string[] {
                        "USE ME FOR AUTOMATION(USR SCHDLD)"});
            table1.AddRow(new string[] {
                        "User Evergreen Capacity Project"});
            table1.AddRow(new string[] {
                        "User Scheduled Project in Italian & Japanese (Jo)"});
            table1.AddRow(new string[] {
                        "User Scheduled Test (Jo)"});
            table1.AddRow(new string[] {
                        "Windows 10 Migration - Depot"});
            table1.AddRow(new string[] {
                        "Windows 10 Teams and Request Types"});
            table1.AddRow(new string[] {
                        "Windows 10 Updates - Migration"});
            table1.AddRow(new string[] {
                        "Windows 10 Updates - New York"});
            table1.AddRow(new string[] {
                        "Windows 7 Migration (Computer Scheduled Project)"});
            table1.AddRow(new string[] {
                        "zDevice Sch for Automations Feature"});
            table1.AddRow(new string[] {
                        "zMailbox Sch for Automations Feature"});
            table1.AddRow(new string[] {
                        "zUser Sch for Automations Feature"});
#line 14
 testRunner.Then("User sees that \"Select Existing Project\" dropdown contains following options on I" +
                    "mport Projects page:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesDynamicLis" +
            "tAsAScope")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_AdminPage")]
        [NUnit.Framework.CategoryAttribute("AdminPage")]
        [NUnit.Framework.CategoryAttribute("DAS13110")]
        [NUnit.Framework.CategoryAttribute("Cleanup")]
        [NUnit.Framework.CategoryAttribute("Projects")]
        public virtual void EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesDynamicListAsAScope()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesDynamicListAsAScopeInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesDynamicListAsAScopeInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesDynamicLis" +
                    "tAsAScope", null, new string[] {
                        "Evergreen",
                        "Admin",
                        "EvergreenJnr_AdminPage",
                        "AdminPage",
                        "DAS13110",
                        "Cleanup",
                        "Projects"});
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 48
 testRunner.When("User clicks \'Devices\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("\'All Devices\' list should be displayed to the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.When("User clicks on \'Hostname\' column header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.And("User create dynamic list with \"Dynamic13110\" name on \"Devices\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.Then("\"Dynamic13110\" list is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProjectName",
                        "Scope",
                        "ProjectTemplate",
                        "Mode"});
            table2.AddRow(new string[] {
                        "Project13110Dynamic1",
                        "Dynamic13110",
                        "None",
                        "Standalone Project"});
#line 53
 testRunner.When("Project created via API and opened", ((string)(null)), table2, "When ");
#line 56
 testRunner.Then("Project \"Project13110Dynamic1\" is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.When("User selects \"Scope\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.And("User expands multiselect to add objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Then("Objects are displayed in alphabetical order on the Admin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table3.AddRow(new string[] {
                        "00HA7MKAVVFDAV"});
            table3.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table3.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 61
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table3, "When ");
#line 66
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table4.AddRow(new string[] {
                        "00HA7MKAVVFDAV"});
            table4.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table4.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 70
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table4, "Then ");
#line 75
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table5.AddRow(new string[] {
                        "00HA7MKAVVFDAV"});
            table5.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table5.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 76
 testRunner.Then("following Items are displayed in the History table", ((string)(null)), table5, "Then ");
#line 81
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.And("User navigates to the \'Applications\' tab on Project Scope Changes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("User expands multiselect to add objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table6.AddRow(new string[] {
                        "\"WPF/E\" (codename) Community Technology Preview (Feb 2007) (0.8.5.0)"});
            table6.AddRow(new string[] {
                        "0004 - Adobe Acrobat Reader 5.0.5 Francais (5.0.5)"});
            table6.AddRow(new string[] {
                        "0036 - Microsoft Access 97 SR-2 English (8.0)"});
#line 85
 testRunner.And("User selects following Objects from the expandable multiselect", ((string)(null)), table6, "And ");
#line 90
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table7.AddRow(new string[] {
                        "\"WPF/E\" (codename) Community Technology Preview (Feb 2007)"});
            table7.AddRow(new string[] {
                        "0004 - Adobe Acrobat Reader 5.0.5 Francais"});
            table7.AddRow(new string[] {
                        "0036 - Microsoft Access 97 SR-2 English"});
#line 94
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table7, "Then ");
#line 99
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table8.AddRow(new string[] {
                        "\"WPF/E\" (codename) Community Technology Preview (Feb 2007)"});
            table8.AddRow(new string[] {
                        "0004 - Adobe Acrobat Reader 5.0.5 Francais"});
            table8.AddRow(new string[] {
                        "0036 - Microsoft Access 97 SR-2 English"});
#line 100
 testRunner.Then("additional onboarded Items are displayed in the History table", ((string)(null)), table8, "Then ");
#line 105
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProjectName",
                        "Scope",
                        "ProjectTemplate",
                        "Mode"});
            table9.AddRow(new string[] {
                        "Project13110Dynamic2",
                        "Dynamic13110",
                        "None",
                        "Standalone Project"});
#line 106
 testRunner.When("Project created via API and opened", ((string)(null)), table9, "When ");
#line 109
 testRunner.Then("Project \"Project13110Dynamic2\" is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.When("User selects \"Scope\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.And("User navigates to the \'Applications\' tab on Project Scope Changes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("User expands multiselect to add objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table10.AddRow(new string[] {
                        "\"WPF/E\" (codename) Community Technology Preview (Feb 2007) (0.8.5.0)"});
            table10.AddRow(new string[] {
                        "0004 - Adobe Acrobat Reader 5.0.5 Francais (5.0.5)"});
            table10.AddRow(new string[] {
                        "0036 - Microsoft Access 97 SR-2 English (8.0)"});
#line 114
 testRunner.And("User selects following Objects from the expandable multiselect", ((string)(null)), table10, "And ");
#line 119
 testRunner.When("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table11.AddRow(new string[] {
                        "\"WPF/E\" (codename) Community Technology Preview (Feb 2007)"});
            table11.AddRow(new string[] {
                        "0004 - Adobe Acrobat Reader 5.0.5 Francais"});
            table11.AddRow(new string[] {
                        "0036 - Microsoft Access 97 SR-2 English"});
#line 123
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table11, "Then ");
#line 128
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table12.AddRow(new string[] {
                        "\"WPF/E\" (codename) Community Technology Preview (Feb 2007)"});
            table12.AddRow(new string[] {
                        "0004 - Adobe Acrobat Reader 5.0.5 Francais"});
            table12.AddRow(new string[] {
                        "0036 - Microsoft Access 97 SR-2 English"});
#line 129
 testRunner.Then("following Items are displayed in the History table", ((string)(null)), table12, "Then ");
#line 134
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.And("User navigates to the \'Devices\' tab on Project Scope Changes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.And("User expands multiselect to add objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.Then("Objects are displayed in alphabetical order on the Admin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table13.AddRow(new string[] {
                        "00HA7MKAVVFDAV"});
            table13.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table13.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 139
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table13, "When ");
#line 144
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 147
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table14.AddRow(new string[] {
                        "00HA7MKAVVFDAV"});
            table14.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table14.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 148
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table14, "Then ");
#line 153
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table15.AddRow(new string[] {
                        "00HA7MKAVVFDAV"});
            table15.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table15.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 154
 testRunner.Then("additional onboarded Items are displayed in the History table", ((string)(null)), table15, "Then ");
#line 159
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesStaticList" +
            "AsAScope")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_AdminPage")]
        [NUnit.Framework.CategoryAttribute("AdminPage")]
        [NUnit.Framework.CategoryAttribute("Projects")]
        [NUnit.Framework.CategoryAttribute("DAS13110")]
        [NUnit.Framework.CategoryAttribute("Cleanup")]
        public virtual void EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesStaticListAsAScope()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesStaticListAsAScopeInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesStaticListAsAScopeInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_AdminPage_ChecksThatErrorIsNotDisplayedWhenForProjectsUsesStaticList" +
                    "AsAScope", null, new string[] {
                        "Evergreen",
                        "Admin",
                        "EvergreenJnr_AdminPage",
                        "AdminPage",
                        "Projects",
                        "DAS13110",
                        "Cleanup"});
#line 162
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemName"});
            table16.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table16.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table16.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 163
 testRunner.When("User create static list with \"Static13110\" name on \"Devices\" page with following " +
                    "items", ((string)(null)), table16, "When ");
#line 168
 testRunner.Then("\"Static13110\" list is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProjectName",
                        "Scope",
                        "ProjectTemplate",
                        "Mode"});
            table17.AddRow(new string[] {
                        "Project13110Static1",
                        "Static13110",
                        "None",
                        "Standalone Project"});
#line 169
 testRunner.When("Project created via API and opened", ((string)(null)), table17, "When ");
#line 172
 testRunner.Then("Project \"Project13110Static1\" is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 173
 testRunner.When("User selects \"Scope\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
 testRunner.And("User expands multiselect to add objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.Then("Objects are displayed in alphabetical order on the Admin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table18.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table18.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table18.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 177
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table18, "When ");
#line 182
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table19.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table19.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table19.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 186
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table19, "Then ");
#line 191
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table20.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table20.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table20.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 192
 testRunner.Then("following Items are displayed in the History table", ((string)(null)), table20, "Then ");
#line 197
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 199
 testRunner.And("User navigates to the \'Applications\' tab on Project Scope Changes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table21.AddRow(new string[] {
                        "NI LabVIEW PID Control Toolset 6.0 (for LabVIEW 7.1) (7.1.0)"});
#line 200
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table21, "When ");
#line 203
 testRunner.When("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 204
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.Then("Success message is displayed and contains \"1 object queued for onboarding, 0 obje" +
                    "cts offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 206
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table22.AddRow(new string[] {
                        "NI LabVIEW PID Control Toolset 6.0 (for LabVIEW 7.1)"});
#line 207
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table22, "Then ");
#line 210
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table23.AddRow(new string[] {
                        "NI LabVIEW PID Control Toolset 6.0 (for LabVIEW 7.1)"});
#line 211
 testRunner.Then("additional onboarded Items are displayed in the History table", ((string)(null)), table23, "Then ");
#line 214
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProjectName",
                        "Scope",
                        "ProjectTemplate",
                        "Mode"});
            table24.AddRow(new string[] {
                        "Project13110Static2",
                        "Static13110",
                        "None",
                        "Standalone Project"});
#line 215
 testRunner.When("Project created via API and opened", ((string)(null)), table24, "When ");
#line 218
 testRunner.Then("Project \"Project13110Static2\" is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 219
 testRunner.When("User selects \"Scope\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
 testRunner.And("User navigates to the \'Applications\' tab on Project Scope Changes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table25.AddRow(new string[] {
                        "20040610sqlserverck (1.0.0)"});
            table25.AddRow(new string[] {
                        "AddressGrabber Standard (3.1)"});
            table25.AddRow(new string[] {
                        "Adobe Acrobat Reader 5.0 (1.0)"});
#line 222
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table25, "When ");
#line 227
 testRunner.When("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 230
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table26.AddRow(new string[] {
                        "20040610sqlserverck"});
            table26.AddRow(new string[] {
                        "AddressGrabber Standard"});
            table26.AddRow(new string[] {
                        "Adobe Acrobat Reader 5.0"});
#line 231
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table26, "Then ");
#line 236
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table27.AddRow(new string[] {
                        "20040610sqlserverck"});
            table27.AddRow(new string[] {
                        "AddressGrabber Standard"});
            table27.AddRow(new string[] {
                        "Adobe Acrobat Reader 5.0"});
#line 237
 testRunner.Then("following Items are displayed in the History table", ((string)(null)), table27, "Then ");
#line 242
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 244
 testRunner.And("User expands multiselect to add objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
 testRunner.Then("Objects are displayed in alphabetical order on the Admin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table28.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table28.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table28.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 246
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table28, "When ");
#line 251
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.Then("Success message is displayed and contains \"3 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 254
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table29.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table29.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table29.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 255
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table29, "Then ");
#line 260
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table30.AddRow(new string[] {
                        "001BAQXT6JWFPI"});
            table30.AddRow(new string[] {
                        "001PSUMZYOW581"});
            table30.AddRow(new string[] {
                        "00BDM1JUR8IF419"});
#line 261
 testRunner.Then("additional onboarded Items are displayed in the History table", ((string)(null)), table30, "Then ");
#line 266
 testRunner.And("There are no errors in the browser console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_AdminPage_CheckDefaultSortOrderForQueueAndHistoryTab")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_AdminPage")]
        [NUnit.Framework.CategoryAttribute("AdminPage")]
        [NUnit.Framework.CategoryAttribute("Projects")]
        [NUnit.Framework.CategoryAttribute("DAS12955")]
        [NUnit.Framework.CategoryAttribute("DAS12820")]
        [NUnit.Framework.CategoryAttribute("DAS11978")]
        [NUnit.Framework.CategoryAttribute("Cleanup")]
        public virtual void EvergreenJnr_AdminPage_CheckDefaultSortOrderForQueueAndHistoryTab()
        {
            System.Exception lastException = null;
            for (int i = 0; (i <= 1); i = (i + 1))
            {
                try
                {
                    this.EvergreenJnr_AdminPage_CheckDefaultSortOrderForQueueAndHistoryTabInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1)
                     <= 1))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }

        private void EvergreenJnr_AdminPage_CheckDefaultSortOrderForQueueAndHistoryTabInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_AdminPage_CheckDefaultSortOrderForQueueAndHistoryTab", null, new string[] {
                        "Evergreen",
                        "Admin",
                        "EvergreenJnr_AdminPage",
                        "AdminPage",
                        "Projects",
                        "DAS12955",
                        "DAS12820",
                        "DAS11978",
                        "Cleanup"});
#line 269
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProjectName",
                        "Scope",
                        "ProjectTemplate",
                        "Mode"});
            table31.AddRow(new string[] {
                        "TestProject55",
                        "All Devices",
                        "None",
                        "Standalone Project"});
#line 270
 testRunner.When("Project created via API and opened", ((string)(null)), table31, "When ");
#line 273
 testRunner.Then("Project \"TestProject55\" is displayed to user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 274
 testRunner.Then("\"Show Original Application Column On Application Dashboards\" checkbox is not disp" +
                    "layed on the Admin page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
 testRunner.When("User selects \"Scope\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 277
 testRunner.Then("open tab in the Project Scope Changes section is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table32.AddRow(new string[] {
                        "00K4CEEQ737BA4L"});
            table32.AddRow(new string[] {
                        "00YWR8TJU4ZF8V"});
            table32.AddRow(new string[] {
                        "019BFPQGKK5QT8N"});
            table32.AddRow(new string[] {
                        "02C80G8RFTPA9E"});
            table32.AddRow(new string[] {
                        "06T5FX3CUY08AE"});
            table32.AddRow(new string[] {
                        "0BET6XYEOG5ESB"});
            table32.AddRow(new string[] {
                        "07RJRCQDVK1KLR"});
            table32.AddRow(new string[] {
                        "0E402TL1EG79GIT"});
            table32.AddRow(new string[] {
                        "0GLO1UYQ5AKCZEA"});
            table32.AddRow(new string[] {
                        "DK1LF3X47N7PWX7"});
#line 278
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table32, "When ");
#line 290
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.Then("Success message is displayed and contains \"10 objects queued for onboarding, 0 ob" +
                    "jects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 293
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table33.AddRow(new string[] {
                        "00K4CEEQ737BA4L"});
            table33.AddRow(new string[] {
                        "00YWR8TJU4ZF8V"});
            table33.AddRow(new string[] {
                        "019BFPQGKK5QT8N"});
            table33.AddRow(new string[] {
                        "02C80G8RFTPA9E"});
            table33.AddRow(new string[] {
                        "06T5FX3CUY08AE"});
            table33.AddRow(new string[] {
                        "0BET6XYEOG5ESB"});
            table33.AddRow(new string[] {
                        "07RJRCQDVK1KLR"});
            table33.AddRow(new string[] {
                        "0E402TL1EG79GIT"});
            table33.AddRow(new string[] {
                        "0GLO1UYQ5AKCZEA"});
            table33.AddRow(new string[] {
                        "DK1LF3X47N7PWX7"});
#line 294
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table33, "Then ");
#line 306
 testRunner.Then("data in table is sorted by \"Item\" column in ascending order by default on the Adm" +
                    "in page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 307
 testRunner.Then("data in table is sorted by \"Date\" column in descending order by default on the Ad" +
                    "min page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table34.AddRow(new string[] {
                        "00K4CEEQ737BA4L"});
            table34.AddRow(new string[] {
                        "00YWR8TJU4ZF8V"});
            table34.AddRow(new string[] {
                        "019BFPQGKK5QT8N"});
            table34.AddRow(new string[] {
                        "02C80G8RFTPA9E"});
            table34.AddRow(new string[] {
                        "06T5FX3CUY08AE"});
            table34.AddRow(new string[] {
                        "0BET6XYEOG5ESB"});
            table34.AddRow(new string[] {
                        "07RJRCQDVK1KLR"});
            table34.AddRow(new string[] {
                        "0E402TL1EG79GIT"});
            table34.AddRow(new string[] {
                        "0GLO1UYQ5AKCZEA"});
            table34.AddRow(new string[] {
                        "DK1LF3X47N7PWX7"});
#line 309
 testRunner.Then("following Items are displayed in the History table", ((string)(null)), table34, "Then ");
#line 321
 testRunner.Then("data in table is sorted by \"Item\" column in ascending order by default on the Adm" +
                    "in page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 322
 testRunner.Then("data in table is sorted by \"Date\" column in descending order by default on the Ad" +
                    "min page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 323
 testRunner.When("User selects \"Scope Changes\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 324
 testRunner.And("User navigates to the \'Applications\' tab on Project Scope Changes page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objects"});
            table35.AddRow(new string[] {
                        "ACD Display 3.4"});
            table35.AddRow(new string[] {
                        "Hilfe zu Blockdiagrammen"});
            table35.AddRow(new string[] {
                        "Intel(R) Processor Graphics (20.19.15.4568)"});
            table35.AddRow(new string[] {
                        "Microsoft Exchange Client Language Pack - Hindi (15.0.1178.4)"});
            table35.AddRow(new string[] {
                        "NJStar Chinese Word Processor"});
#line 325
 testRunner.When("User expands multiselect and selects following Objects", ((string)(null)), table35, "When ");
#line 332
 testRunner.And("User clicks \'UPDATE ALL CHANGES\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.And("User clicks \'UPDATE PROJECT\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.Then("Success message is displayed and contains \"5 objects queued for onboarding, 0 obj" +
                    "ects offboarded\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.When("User selects \"Queue\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table36.AddRow(new string[] {
                        "ACD Display 3.4"});
            table36.AddRow(new string[] {
                        "Hilfe zu Blockdiagrammen"});
            table36.AddRow(new string[] {
                        "Intel(R) Processor Graphics"});
            table36.AddRow(new string[] {
                        "Microsoft Exchange Client Language Pack - Hindi"});
            table36.AddRow(new string[] {
                        "NJStar Chinese Word Processor"});
#line 336
 testRunner.Then("following Items are displayed in the Queue table", ((string)(null)), table36, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table37.AddRow(new string[] {
                        "ACD Display 3.4"});
            table37.AddRow(new string[] {
                        "Hilfe zu Blockdiagrammen"});
            table37.AddRow(new string[] {
                        "Intel(R) Processor Graphics"});
            table37.AddRow(new string[] {
                        "Microsoft Exchange Client Language Pack - Hindi"});
            table37.AddRow(new string[] {
                        "NJStar Chinese Word Processor"});
#line 343
 testRunner.Then("following Items are displayed at the top of the list", ((string)(null)), table37, "Then ");
#line 350
 testRunner.Then("data in table is sorted by \"Item\" column in ascending order by default on the Adm" +
                    "in page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 351
 testRunner.Then("data in table is sorted by \"Date\" column in descending order by default on the Ad" +
                    "min page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 352
 testRunner.When("User selects \"History\" tab on the Project details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Items"});
            table38.AddRow(new string[] {
                        "ACD Display 3.4"});
            table38.AddRow(new string[] {
                        "Hilfe zu Blockdiagrammen"});
            table38.AddRow(new string[] {
                        "Intel(R) Processor Graphics"});
            table38.AddRow(new string[] {
                        "Microsoft Exchange Client Language Pack - Hindi"});
            table38.AddRow(new string[] {
                        "NJStar Chinese Word Processor"});
#line 353
 testRunner.Then("additional onboarded Items are displayed in the History table", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

    }
}
#pragma warning restore
#endregion

