// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DashworksTestAutomationCore.Tests.EvergreenJnr.EvergreenJnr_FiltersFeature.FilterFunctionality
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FiltersFunctionalityPart19")]
    public partial class FiltersFunctionalityPart19Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FiltersFunctionalityPart19.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FiltersFunctionalityPart19", "\tRuns Filters Functionality related tests", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("User is logged in to the Evergreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.Then("Evergreen Dashboards page should be displayed to the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartI")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartI()
        {
            string[] tagsOfScenario = new string[] {
                    "Evergreen",
                    "Devices",
                    "EvergreenJnr_FiltersFeature",
                    "FilterFunctionality",
                    "DAS15194"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartI", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2060 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2060.AddRow(new string[] {
                            "",
                            "Used on device"});
                table2060.AddRow(new string[] {
                            "",
                            "Entitled to device"});
                table2060.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 12
 testRunner.When("User add \"Device Owner Building\" filter where type is \"Not empty\" with following " +
                        "Value and Association:", ((string)(null)), table2060, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2061 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedValues",
                            "Association"});
                table2061.AddRow(new string[] {
                            "Belfast",
                            "Used on device"});
                table2061.AddRow(new string[] {
                            "Los Angeles",
                            "Entitled to device"});
                table2061.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 17
 testRunner.And("User Add And \"Device Owner City\" filter where type is \"Equals\" with following Loo" +
                        "kup Value and Association:", ((string)(null)), table2061, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2062 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedCheckboxes",
                            "Association"});
                table2062.AddRow(new string[] {
                            "Red",
                            "Used on device"});
                table2062.AddRow(new string[] {
                            "",
                            "Entitled to device"});
                table2062.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 22
 testRunner.And("User Add And \"Device Owner Compliance\" filter where type is \"Does not equal\" with" +
                        " selected Checkboxes and following Association:", ((string)(null)), table2062, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2063 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedValues",
                            "Association"});
                table2063.AddRow(new string[] {
                            "Empty",
                            "Not installed on device"});
                table2063.AddRow(new string[] {
                            "",
                            "Not entitled to device"});
                table2063.AddRow(new string[] {
                            "",
                            "Not used on device"});
#line 27
 testRunner.And("User Add And \"Device Owner Country\" filter where type is \"Equals\" with following " +
                        "Lookup Value and Association:", ((string)(null)), table2063, "And ");
#line hidden
#line 32
 testRunner.Then("\"846\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartII()
        {
            string[] tagsOfScenario = new string[] {
                    "Evergreen",
                    "Devices",
                    "EvergreenJnr_FiltersFeature",
                    "FilterFunctionality",
                    "DAS15194"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 36
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2064 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedCheckboxes",
                            "Association"});
                table2064.AddRow(new string[] {
                            "Finance",
                            "Used on device"});
                table2064.AddRow(new string[] {
                            "Sales",
                            "Entitled to device"});
                table2064.AddRow(new string[] {
                            "Support",
                            "Installed on device"});
                table2064.AddRow(new string[] {
                            "Technology",
                            ""});
#line 38
 testRunner.And("User add \"Device Owner Department\" filter where type is \"Equals\" with selected Ex" +
                        "panded Checkboxes and following Association:", ((string)(null)), table2064, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2065 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2065.AddRow(new string[] {
                            "pro",
                            "Not installed on device"});
#line 44
 testRunner.And("User Add And \"Device Owner Description\" filter where type is \"Does not begin with" +
                        "\" with following Value and Association:", ((string)(null)), table2065, "And ");
#line hidden
#line 47
 testRunner.Then("\"854\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIII")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIII()
        {
            string[] tagsOfScenario = new string[] {
                    "Evergreen",
                    "Devices",
                    "EvergreenJnr_FiltersFeature",
                    "FilterFunctionality",
                    "DAS15194"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIII", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 51
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2066 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2066.AddRow(new string[] {
                            "Aceline",
                            "Entitled to device"});
                table2066.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 53
 testRunner.And("User add \"Device Owner Display Name\" filter where type is \"Contains\" with followi" +
                        "ng Value and Association:", ((string)(null)), table2066, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2067 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2067.AddRow(new string[] {
                            "",
                            "Entitled to device"});
                table2067.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 57
 testRunner.And("User Add And \"Device Owner Domain\" filter where type is \"Not empty\" with followin" +
                        "g Value and Association:", ((string)(null)), table2067, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2068 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2068.AddRow(new string[] {
                            "demo.juriba.com",
                            "Entitled to device"});
                table2068.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 61
 testRunner.And("User Add And \"Device Owner Email Address\" filter where type is \"Ends with\" with f" +
                        "ollowing Value and Association:", ((string)(null)), table2068, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2069 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedCheckboxes",
                            "Association"});
                table2069.AddRow(new string[] {
                            "TRUE",
                            "Entitled to device"});
                table2069.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 65
 testRunner.And("User Add And \"Device Owner Enabled\" filter where type is \"Equals\" with selected C" +
                        "heckboxes and following Association:", ((string)(null)), table2069, "And ");
#line hidden
#line 69
 testRunner.Then("\"23\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIV")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIV()
        {
            string[] tagsOfScenario = new string[] {
                    "Evergreen",
                    "Devices",
                    "EvergreenJnr_FiltersFeature",
                    "FilterFunctionality",
                    "DAS15194"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartIV", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 73
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2070 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedValues",
                            "Association"});
                table2070.AddRow(new string[] {
                            "Empty",
                            "Entitled to device"});
                table2070.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 75
 testRunner.And("User add \"Device Owner Floor\" filter where type is \"Equals\" with following Lookup" +
                        " Value and Association:", ((string)(null)), table2070, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2071 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2071.AddRow(new string[] {
                            "sdsds",
                            "Entitled to device"});
                table2071.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 79
 testRunner.And("User Add And \"Device Owner Given Name\" filter where type is \"Does not end with\" w" +
                        "ith following Value and Association:", ((string)(null)), table2071, "And ");
#line hidden
#line 83
 testRunner.Then("\"1,139\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartV")]
        [NUnit.Framework.CategoryAttribute("Evergreen")]
        [NUnit.Framework.CategoryAttribute("Devices")]
        [NUnit.Framework.CategoryAttribute("EvergreenJnr_FiltersFeature")]
        [NUnit.Framework.CategoryAttribute("FilterFunctionality")]
        [NUnit.Framework.CategoryAttribute("DAS15194")]
        public virtual void EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartV()
        {
            string[] tagsOfScenario = new string[] {
                    "Evergreen",
                    "Devices",
                    "EvergreenJnr_FiltersFeature",
                    "FilterFunctionality",
                    "DAS15194"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EvergreenJnr_ApplicationsList_CheckDeviceOwnerItemsCounterPartV", null, new string[] {
                        "Evergreen",
                        "Devices",
                        "EvergreenJnr_FiltersFeature",
                        "FilterFunctionality",
                        "DAS15194"});
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 87
 testRunner.When("User clicks \'Applications\' on the left-hand menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.And("User clicks the Filters button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2072 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2072.AddRow(new string[] {
                            "\\\\fileserver",
                            "Used on device"});
                table2072.AddRow(new string[] {
                            "",
                            "Entitled to device"});
                table2072.AddRow(new string[] {
                            "",
                            "Installed on device"});
#line 89
 testRunner.And("User add \"Device Owner Home Directory\" filter where type is \"Begins with\" with fo" +
                        "llowing Value and Association:", ((string)(null)), table2072, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2073 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedCheckboxes",
                            "Association"});
                table2073.AddRow(new string[] {
                            "H:",
                            "Entitled to device"});
#line 94
 testRunner.And("User Add And \"Device Owner Home Drive\" filter where type is \"Equals\" with selecte" +
                        "d Checkboxes and following Association:", ((string)(null)), table2073, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2074 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2074.AddRow(new string[] {
                            "ZZW1565756",
                            "Not installed on device"});
#line 97
 testRunner.And("User Add And \"Device Owner Username\" filter where type is \"Does not equal\" with f" +
                        "ollowing Value and Association:", ((string)(null)), table2074, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2075 = new TechTalk.SpecFlow.Table(new string[] {
                            "Values",
                            "Association"});
                table2075.AddRow(new string[] {
                            "8 Aug 2019",
                            "Entitled to device"});
#line 100
 testRunner.When("User Add And \"Device Owner Last Logon Date\" filter where type is \"Before\" with fo" +
                        "llowing Data and Association:", ((string)(null)), table2075, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2076 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number",
                            "Association"});
                table2076.AddRow(new string[] {
                            "4",
                            "Entitled to device"});
#line 103
 testRunner.And("User Add And \"Device Owner Key\" filter where type is \"Greater than\" with followin" +
                        "g Number and Association:", ((string)(null)), table2076, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2077 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectedValues",
                            "Association"});
                table2077.AddRow(new string[] {
                            "Empty",
                            "Entitled to device"});
                table2077.AddRow(new string[] {
                            "US-E",
                            ""});
#line 106
 testRunner.And("User Add And \"Device Owner Region\" filter where type is \"Equals\" with following L" +
                        "ookup Value and Association:", ((string)(null)), table2077, "And ");
#line hidden
#line 110
 testRunner.Then("\"213\" rows are displayed in the agGrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
